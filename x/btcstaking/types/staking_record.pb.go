// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorenzo/btcstaking/v1/staking_record.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BTCStakingRecord struct {
	TxHash        []byte `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Amount        uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	ReceiverAddr  []byte `protobuf:"bytes,3,opt,name=receiver_addr,json=receiverAddr,proto3" json:"receiver_addr,omitempty"`
	AgentName     string `protobuf:"bytes,4,opt,name=agent_name,json=agentName,proto3" json:"agent_name,omitempty"`
	AgentBtcAddr  string `protobuf:"bytes,5,opt,name=agent_btc_addr,json=agentBtcAddr,proto3" json:"agent_btc_addr,omitempty"`
	ChainId       uint32 `protobuf:"varint,6,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	MintYatResult string `protobuf:"bytes,7,opt,name=mint_yat_result,json=mintYatResult,proto3" json:"mint_yat_result,omitempty"`
}

func (m *BTCStakingRecord) Reset()         { *m = BTCStakingRecord{} }
func (m *BTCStakingRecord) String() string { return proto.CompactTextString(m) }
func (*BTCStakingRecord) ProtoMessage()    {}
func (*BTCStakingRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_8fe1ffedd1828bb5, []int{0}
}
func (m *BTCStakingRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BTCStakingRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BTCStakingRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BTCStakingRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCStakingRecord.Merge(m, src)
}
func (m *BTCStakingRecord) XXX_Size() int {
	return m.Size()
}
func (m *BTCStakingRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCStakingRecord.DiscardUnknown(m)
}

var xxx_messageInfo_BTCStakingRecord proto.InternalMessageInfo

func (m *BTCStakingRecord) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *BTCStakingRecord) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *BTCStakingRecord) GetReceiverAddr() []byte {
	if m != nil {
		return m.ReceiverAddr
	}
	return nil
}

func (m *BTCStakingRecord) GetAgentName() string {
	if m != nil {
		return m.AgentName
	}
	return ""
}

func (m *BTCStakingRecord) GetAgentBtcAddr() string {
	if m != nil {
		return m.AgentBtcAddr
	}
	return ""
}

func (m *BTCStakingRecord) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *BTCStakingRecord) GetMintYatResult() string {
	if m != nil {
		return m.MintYatResult
	}
	return ""
}

// BTCBStakingRecord defines the message for btcb staking record
type BTCBStakingRecord struct {
	// staking_idx defines the staking index
	StakingIdx uint64 `protobuf:"varint,1,opt,name=staking_idx,json=stakingIdx,proto3" json:"staking_idx,omitempty"`
	// contract defines the contract
	Contract []byte `protobuf:"bytes,2,opt,name=contract,proto3" json:"contract,omitempty"`
	// receiver_addr defines the receiver address
	ReceiverAddr string `protobuf:"bytes,3,opt,name=receiver_addr,json=receiverAddr,proto3" json:"receiver_addr,omitempty"`
	// amount defines the stBTC amount
	Amount cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
	// chain_id defines the chain id
	ChainId uint32 `protobuf:"varint,5,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// mint_yat_result defines the mint yat result
	MintYatResult string `protobuf:"bytes,6,opt,name=mint_yat_result,json=mintYatResult,proto3" json:"mint_yat_result,omitempty"`
}

func (m *BTCBStakingRecord) Reset()         { *m = BTCBStakingRecord{} }
func (m *BTCBStakingRecord) String() string { return proto.CompactTextString(m) }
func (*BTCBStakingRecord) ProtoMessage()    {}
func (*BTCBStakingRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_8fe1ffedd1828bb5, []int{1}
}
func (m *BTCBStakingRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BTCBStakingRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BTCBStakingRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BTCBStakingRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCBStakingRecord.Merge(m, src)
}
func (m *BTCBStakingRecord) XXX_Size() int {
	return m.Size()
}
func (m *BTCBStakingRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCBStakingRecord.DiscardUnknown(m)
}

var xxx_messageInfo_BTCBStakingRecord proto.InternalMessageInfo

func (m *BTCBStakingRecord) GetStakingIdx() uint64 {
	if m != nil {
		return m.StakingIdx
	}
	return 0
}

func (m *BTCBStakingRecord) GetContract() []byte {
	if m != nil {
		return m.Contract
	}
	return nil
}

func (m *BTCBStakingRecord) GetReceiverAddr() string {
	if m != nil {
		return m.ReceiverAddr
	}
	return ""
}

func (m *BTCBStakingRecord) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *BTCBStakingRecord) GetMintYatResult() string {
	if m != nil {
		return m.MintYatResult
	}
	return ""
}

func init() {
	proto.RegisterType((*BTCStakingRecord)(nil), "lorenzo.btcstaking.v1.BTCStakingRecord")
	proto.RegisterType((*BTCBStakingRecord)(nil), "lorenzo.btcstaking.v1.BTCBStakingRecord")
}

func init() {
	proto.RegisterFile("lorenzo/btcstaking/v1/staking_record.proto", fileDescriptor_8fe1ffedd1828bb5)
}

var fileDescriptor_8fe1ffedd1828bb5 = []byte{
	// 453 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xcf, 0x6e, 0x13, 0x31,
	0x10, 0xc6, 0x63, 0x48, 0x93, 0xc6, 0x24, 0xfc, 0x59, 0x51, 0xba, 0x8d, 0xd4, 0x4d, 0x54, 0x10,
	0x8a, 0x90, 0x58, 0xab, 0xaa, 0x38, 0x70, 0x64, 0x7b, 0x21, 0x12, 0x42, 0x68, 0xdb, 0x0b, 0x5c,
	0x56, 0x8e, 0x6d, 0xed, 0xae, 0x1a, 0xdb, 0x95, 0x3d, 0x89, 0xb6, 0x3c, 0x05, 0x8f, 0xd5, 0x63,
	0x8f, 0x88, 0x43, 0x85, 0x92, 0x07, 0x80, 0x47, 0x40, 0xb1, 0x37, 0xa1, 0xa0, 0x4a, 0xbd, 0xf9,
	0xfb, 0x66, 0x3c, 0xd6, 0xcf, 0xf3, 0xe1, 0x57, 0x53, 0x6d, 0x84, 0xfa, 0xaa, 0xc9, 0x04, 0x98,
	0x05, 0x7a, 0x56, 0xaa, 0x9c, 0xcc, 0x0f, 0x49, 0x7d, 0xcc, 0x8c, 0x60, 0xda, 0xf0, 0xf8, 0xdc,
	0x68, 0xd0, 0xc1, 0x4e, 0xdd, 0x1b, 0xff, 0xed, 0x8d, 0xe7, 0x87, 0xfd, 0x5d, 0xa6, 0xad, 0xd4,
	0x96, 0x48, 0xeb, 0xae, 0x4a, 0x9b, 0xfb, 0xfe, 0xfe, 0x9e, 0x2f, 0x64, 0x4e, 0x11, 0x2f, 0xea,
	0xd2, 0xd3, 0x5c, 0xe7, 0xda, 0xfb, 0xab, 0x93, 0x77, 0x0f, 0x7e, 0x23, 0xfc, 0x38, 0x39, 0x3d,
	0x3e, 0xf1, 0xb3, 0x53, 0xf7, 0x76, 0xb0, 0x8b, 0xdb, 0x50, 0x65, 0x05, 0xb5, 0x45, 0x88, 0x86,
	0x68, 0xd4, 0x4d, 0x5b, 0x50, 0xbd, 0xa7, 0xb6, 0x08, 0x9e, 0xe1, 0x16, 0x95, 0x7a, 0xa6, 0x20,
	0xbc, 0x37, 0x44, 0xa3, 0x66, 0x5a, 0xab, 0xe0, 0x39, 0xee, 0x19, 0xc1, 0x44, 0x39, 0x17, 0x26,
	0xa3, 0x9c, 0x9b, 0xf0, 0xbe, 0xbb, 0xd6, 0x5d, 0x9b, 0xef, 0x38, 0x37, 0xc1, 0x3e, 0xc6, 0x34,
	0x17, 0x0a, 0x32, 0x45, 0xa5, 0x08, 0x9b, 0x43, 0x34, 0xea, 0xa4, 0x1d, 0xe7, 0x7c, 0xa4, 0x52,
	0x04, 0x2f, 0xf0, 0x43, 0x5f, 0x9e, 0x00, 0xf3, 0x43, 0xb6, 0x5c, 0x4b, 0xd7, 0xb9, 0x09, 0x30,
	0x37, 0x64, 0x0f, 0x6f, 0xb3, 0x82, 0x96, 0x2a, 0x2b, 0x79, 0xd8, 0x1a, 0xa2, 0x51, 0x2f, 0x6d,
	0x3b, 0x3d, 0xe6, 0xc1, 0x4b, 0xfc, 0x48, 0x96, 0x0a, 0xb2, 0x0b, 0x0a, 0x99, 0x11, 0x76, 0x36,
	0x85, 0xb0, 0xed, 0x26, 0xf4, 0x56, 0xf6, 0x67, 0x0a, 0xa9, 0x33, 0x0f, 0x7e, 0x21, 0xfc, 0x24,
	0x39, 0x3d, 0x4e, 0xfe, 0x65, 0x1e, 0xe0, 0x07, 0xeb, 0x0d, 0x94, 0xbc, 0x72, 0xdc, 0xcd, 0x14,
	0xd7, 0xd6, 0x98, 0x57, 0x41, 0x1f, 0x6f, 0x33, 0xad, 0xc0, 0x50, 0xe6, 0xe9, 0xbb, 0xe9, 0x46,
	0xdf, 0xce, 0xdf, 0xf9, 0x8f, 0xff, 0xcd, 0xe6, 0xf3, 0x1c, 0x7b, 0xb2, 0x7f, 0x79, 0x3d, 0x68,
	0xfc, 0xb8, 0x1e, 0xec, 0xf8, 0x35, 0x59, 0x7e, 0x16, 0x97, 0x9a, 0x48, 0x0a, 0x45, 0x3c, 0x56,
	0xb0, 0xf9, 0xdb, 0x9b, 0xc4, 0x5b, 0x77, 0x12, 0xb7, 0x6e, 0x21, 0x4e, 0x4e, 0x2e, 0x17, 0x11,
	0xba, 0x5a, 0x44, 0xe8, 0xe7, 0x22, 0x42, 0xdf, 0x96, 0x51, 0xe3, 0x6a, 0x19, 0x35, 0xbe, 0x2f,
	0xa3, 0xc6, 0x97, 0xb7, 0x79, 0x09, 0xc5, 0x6c, 0x12, 0x33, 0x2d, 0xc9, 0x07, 0x1f, 0xb5, 0xd7,
	0x9f, 0x56, 0xc1, 0x60, 0x7a, 0x4a, 0xd6, 0x39, 0x9d, 0x1f, 0x91, 0xea, 0x66, 0x58, 0xe1, 0xe2,
	0x5c, 0xd8, 0x49, 0xcb, 0x05, 0xe8, 0xe8, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb9, 0x00, 0x50,
	0x57, 0xcf, 0x02, 0x00, 0x00,
}

func (m *BTCStakingRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BTCStakingRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BTCStakingRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MintYatResult) > 0 {
		i -= len(m.MintYatResult)
		copy(dAtA[i:], m.MintYatResult)
		i = encodeVarintStakingRecord(dAtA, i, uint64(len(m.MintYatResult)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ChainId != 0 {
		i = encodeVarintStakingRecord(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x30
	}
	if len(m.AgentBtcAddr) > 0 {
		i -= len(m.AgentBtcAddr)
		copy(dAtA[i:], m.AgentBtcAddr)
		i = encodeVarintStakingRecord(dAtA, i, uint64(len(m.AgentBtcAddr)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AgentName) > 0 {
		i -= len(m.AgentName)
		copy(dAtA[i:], m.AgentName)
		i = encodeVarintStakingRecord(dAtA, i, uint64(len(m.AgentName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ReceiverAddr) > 0 {
		i -= len(m.ReceiverAddr)
		copy(dAtA[i:], m.ReceiverAddr)
		i = encodeVarintStakingRecord(dAtA, i, uint64(len(m.ReceiverAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Amount != 0 {
		i = encodeVarintStakingRecord(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintStakingRecord(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BTCBStakingRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BTCBStakingRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BTCBStakingRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MintYatResult) > 0 {
		i -= len(m.MintYatResult)
		copy(dAtA[i:], m.MintYatResult)
		i = encodeVarintStakingRecord(dAtA, i, uint64(len(m.MintYatResult)))
		i--
		dAtA[i] = 0x32
	}
	if m.ChainId != 0 {
		i = encodeVarintStakingRecord(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStakingRecord(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.ReceiverAddr) > 0 {
		i -= len(m.ReceiverAddr)
		copy(dAtA[i:], m.ReceiverAddr)
		i = encodeVarintStakingRecord(dAtA, i, uint64(len(m.ReceiverAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintStakingRecord(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0x12
	}
	if m.StakingIdx != 0 {
		i = encodeVarintStakingRecord(dAtA, i, uint64(m.StakingIdx))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintStakingRecord(dAtA []byte, offset int, v uint64) int {
	offset -= sovStakingRecord(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BTCStakingRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovStakingRecord(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovStakingRecord(uint64(m.Amount))
	}
	l = len(m.ReceiverAddr)
	if l > 0 {
		n += 1 + l + sovStakingRecord(uint64(l))
	}
	l = len(m.AgentName)
	if l > 0 {
		n += 1 + l + sovStakingRecord(uint64(l))
	}
	l = len(m.AgentBtcAddr)
	if l > 0 {
		n += 1 + l + sovStakingRecord(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovStakingRecord(uint64(m.ChainId))
	}
	l = len(m.MintYatResult)
	if l > 0 {
		n += 1 + l + sovStakingRecord(uint64(l))
	}
	return n
}

func (m *BTCBStakingRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakingIdx != 0 {
		n += 1 + sovStakingRecord(uint64(m.StakingIdx))
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovStakingRecord(uint64(l))
	}
	l = len(m.ReceiverAddr)
	if l > 0 {
		n += 1 + l + sovStakingRecord(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovStakingRecord(uint64(l))
	if m.ChainId != 0 {
		n += 1 + sovStakingRecord(uint64(m.ChainId))
	}
	l = len(m.MintYatResult)
	if l > 0 {
		n += 1 + l + sovStakingRecord(uint64(l))
	}
	return n
}

func sovStakingRecord(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStakingRecord(x uint64) (n int) {
	return sovStakingRecord(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BTCStakingRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStakingRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BTCStakingRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BTCStakingRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakingRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStakingRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStakingRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = append(m.TxHash[:0], dAtA[iNdEx:postIndex]...)
			if m.TxHash == nil {
				m.TxHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakingRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakingRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStakingRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStakingRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiverAddr = append(m.ReceiverAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.ReceiverAddr == nil {
				m.ReceiverAddr = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakingRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStakingRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStakingRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AgentName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentBtcAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakingRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStakingRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStakingRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AgentBtcAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakingRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintYatResult", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakingRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStakingRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStakingRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintYatResult = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStakingRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStakingRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BTCBStakingRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStakingRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BTCBStakingRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BTCBStakingRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingIdx", wireType)
			}
			m.StakingIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakingRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakingIdx |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakingRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStakingRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStakingRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = append(m.Contract[:0], dAtA[iNdEx:postIndex]...)
			if m.Contract == nil {
				m.Contract = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakingRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStakingRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStakingRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiverAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakingRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStakingRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStakingRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakingRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintYatResult", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakingRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStakingRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStakingRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintYatResult = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStakingRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStakingRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStakingRecord(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStakingRecord
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStakingRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStakingRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStakingRecord
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStakingRecord
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStakingRecord
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStakingRecord        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStakingRecord          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStakingRecord = fmt.Errorf("proto: unexpected end of group")
)
