// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorenzo/plan/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgUpdateParams is the request type for the Msg/UpdateParams RPC method.
type MsgUpdateParams struct {
	// authority is the address of the governance account.
	// just FYI: cosmos.AddressString marks that this field should use type alias
	// for AddressString instead of string, but the functionality is not yet
	// implemented in cosmos-proto
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// params defines the btc light client parameters to update.
	//
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_f54797b8bf30f2f9, []int{0}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse is the response type for the Msg/UpdateParams RPC method.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f54797b8bf30f2f9, []int{1}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

// MsgUpgradePlan is the request type for the Msg/UpgradePlan RPC method.
type MsgUpgradePlan struct {
	// implementation is the new yat logic contract address
	Implementation string `protobuf:"bytes,1,opt,name=implementation,proto3" json:"implementation,omitempty"`
	// authority is the address of the governance account.
	// just FYI: cosmos.AddressString marks that this field should use type alias
	// for AddressString instead of string, but the functionality is not yet
	// implemented in cosmos-proto
	Authority string `protobuf:"bytes,2,opt,name=authority,proto3" json:"authority,omitempty"`
}

func (m *MsgUpgradePlan) Reset()         { *m = MsgUpgradePlan{} }
func (m *MsgUpgradePlan) String() string { return proto.CompactTextString(m) }
func (*MsgUpgradePlan) ProtoMessage()    {}
func (*MsgUpgradePlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_f54797b8bf30f2f9, []int{2}
}
func (m *MsgUpgradePlan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpgradePlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpgradePlan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpgradePlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpgradePlan.Merge(m, src)
}
func (m *MsgUpgradePlan) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpgradePlan) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpgradePlan.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpgradePlan proto.InternalMessageInfo

func (m *MsgUpgradePlan) GetImplementation() string {
	if m != nil {
		return m.Implementation
	}
	return ""
}

func (m *MsgUpgradePlan) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

// MsgUpgradeYATResponse is the response type for the Msg/UpgradeYAT RPC method.
type MsgUpgradePlanResponse struct {
}

func (m *MsgUpgradePlanResponse) Reset()         { *m = MsgUpgradePlanResponse{} }
func (m *MsgUpgradePlanResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpgradePlanResponse) ProtoMessage()    {}
func (*MsgUpgradePlanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f54797b8bf30f2f9, []int{3}
}
func (m *MsgUpgradePlanResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpgradePlanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpgradePlanResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpgradePlanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpgradePlanResponse.Merge(m, src)
}
func (m *MsgUpgradePlanResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpgradePlanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpgradePlanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpgradePlanResponse proto.InternalMessageInfo

// MsgCreatePlan is the request type for the Msg/CreatePlan RPC method.
type MsgCreatePlan struct {
	// name is the name of the plan
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// plan_desc_uri is the URI of the plan description
	PlanDescUri string `protobuf:"bytes,2,opt,name=plan_desc_uri,json=planDescUri,proto3" json:"plan_desc_uri,omitempty"`
	// agent_id is the unique identifier of the agent
	AgentId uint64 `protobuf:"varint,3,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	// plan_start_block is the start block of the plan
	PlanStartBlock github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=plan_start_block,json=planStartBlock,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"plan_start_block"`
	// subscription_end_time is the end time of the subscription
	PeriodBlocks github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=period_blocks,json=periodBlocks,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"period_blocks"`
	// yat_contract_address is the address of the yat contract
	YatContractAddress string `protobuf:"bytes,6,opt,name=yat_contract_address,json=yatContractAddress,proto3" json:"yat_contract_address,omitempty"`
	// sender is the address of the allowed sender
	Sender string `protobuf:"bytes,7,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgCreatePlan) Reset()         { *m = MsgCreatePlan{} }
func (m *MsgCreatePlan) String() string { return proto.CompactTextString(m) }
func (*MsgCreatePlan) ProtoMessage()    {}
func (*MsgCreatePlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_f54797b8bf30f2f9, []int{4}
}
func (m *MsgCreatePlan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreatePlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreatePlan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreatePlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreatePlan.Merge(m, src)
}
func (m *MsgCreatePlan) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreatePlan) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreatePlan.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreatePlan proto.InternalMessageInfo

func (m *MsgCreatePlan) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgCreatePlan) GetPlanDescUri() string {
	if m != nil {
		return m.PlanDescUri
	}
	return ""
}

func (m *MsgCreatePlan) GetAgentId() uint64 {
	if m != nil {
		return m.AgentId
	}
	return 0
}

func (m *MsgCreatePlan) GetYatContractAddress() string {
	if m != nil {
		return m.YatContractAddress
	}
	return ""
}

func (m *MsgCreatePlan) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// MsgCreatePlanResponse is the response type for the Msg/CreatePlan RPC method.
type MsgCreatePlanResponse struct {
	// id is the unique identifier of the plan
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgCreatePlanResponse) Reset()         { *m = MsgCreatePlanResponse{} }
func (m *MsgCreatePlanResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreatePlanResponse) ProtoMessage()    {}
func (*MsgCreatePlanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f54797b8bf30f2f9, []int{5}
}
func (m *MsgCreatePlanResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreatePlanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreatePlanResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreatePlanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreatePlanResponse.Merge(m, src)
}
func (m *MsgCreatePlanResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreatePlanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreatePlanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreatePlanResponse proto.InternalMessageInfo

func (m *MsgCreatePlanResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// MsgSetMerkleRoot is the request type for the Msg/SetMerkleRoot RPC method.
type MsgSetMerkleRoot struct {
	// plan_id is the unique identifier of the plan
	PlanId uint64 `protobuf:"varint,1,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	// merkle_root is the merkle root of the plan
	MerkleRoot string `protobuf:"bytes,2,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
	// sender is the address of the allowed sender
	Sender string `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgSetMerkleRoot) Reset()         { *m = MsgSetMerkleRoot{} }
func (m *MsgSetMerkleRoot) String() string { return proto.CompactTextString(m) }
func (*MsgSetMerkleRoot) ProtoMessage()    {}
func (*MsgSetMerkleRoot) Descriptor() ([]byte, []int) {
	return fileDescriptor_f54797b8bf30f2f9, []int{6}
}
func (m *MsgSetMerkleRoot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetMerkleRoot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetMerkleRoot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetMerkleRoot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetMerkleRoot.Merge(m, src)
}
func (m *MsgSetMerkleRoot) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetMerkleRoot) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetMerkleRoot.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetMerkleRoot proto.InternalMessageInfo

func (m *MsgSetMerkleRoot) GetPlanId() uint64 {
	if m != nil {
		return m.PlanId
	}
	return 0
}

func (m *MsgSetMerkleRoot) GetMerkleRoot() string {
	if m != nil {
		return m.MerkleRoot
	}
	return ""
}

func (m *MsgSetMerkleRoot) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// MsgSetMerkleRootResponse is the response type for the Msg/SetMerkleRoot RPC method.
type MsgSetMerkleRootResponse struct {
}

func (m *MsgSetMerkleRootResponse) Reset()         { *m = MsgSetMerkleRootResponse{} }
func (m *MsgSetMerkleRootResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetMerkleRootResponse) ProtoMessage()    {}
func (*MsgSetMerkleRootResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f54797b8bf30f2f9, []int{7}
}
func (m *MsgSetMerkleRootResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetMerkleRootResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetMerkleRootResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetMerkleRootResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetMerkleRootResponse.Merge(m, src)
}
func (m *MsgSetMerkleRootResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetMerkleRootResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetMerkleRootResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetMerkleRootResponse proto.InternalMessageInfo

// MsgClaims is the request type for the Msg/Claims RPC method.
type MsgClaims struct {
	// plan_id is the unique identifier of the plan
	PlanId uint64 `protobuf:"varint,1,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	// receiver is the address of the receiver
	Receiver string `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
	// round_id is the unique identifier of the round
	RoundId github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=round_id,json=roundId,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"round_id"`
	// amount is the amount of the claim
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
	// merkle_proof is the merkle proof of the claim
	MerkleProof string `protobuf:"bytes,5,opt,name=merkle_proof,json=merkleProof,proto3" json:"merkle_proof,omitempty"`
	// sender is the address of the governance account or module admin
	Sender string `protobuf:"bytes,6,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgClaims) Reset()         { *m = MsgClaims{} }
func (m *MsgClaims) String() string { return proto.CompactTextString(m) }
func (*MsgClaims) ProtoMessage()    {}
func (*MsgClaims) Descriptor() ([]byte, []int) {
	return fileDescriptor_f54797b8bf30f2f9, []int{8}
}
func (m *MsgClaims) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaims) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaims.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaims) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaims.Merge(m, src)
}
func (m *MsgClaims) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaims) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaims.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaims proto.InternalMessageInfo

func (m *MsgClaims) GetPlanId() uint64 {
	if m != nil {
		return m.PlanId
	}
	return 0
}

func (m *MsgClaims) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *MsgClaims) GetMerkleProof() string {
	if m != nil {
		return m.MerkleProof
	}
	return ""
}

func (m *MsgClaims) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// MsgClaimsResponse is the response type for the Msg/Claims RPC method.
type MsgClaimsResponse struct {
}

func (m *MsgClaimsResponse) Reset()         { *m = MsgClaimsResponse{} }
func (m *MsgClaimsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClaimsResponse) ProtoMessage()    {}
func (*MsgClaimsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f54797b8bf30f2f9, []int{9}
}
func (m *MsgClaimsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimsResponse.Merge(m, src)
}
func (m *MsgClaimsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimsResponse proto.InternalMessageInfo

// MsgUpdatePlanStatus is the request type for the Msg/UpdatePlanStatus RPC method.
type MsgUpdatePlanStatus struct {
	// plan_id is the unique identifier of the plan
	PlanId uint64 `protobuf:"varint,1,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	// status is the status of the plan
	Status PlanStatus `protobuf:"varint,2,opt,name=status,proto3,enum=lorenzo.plan.v1.PlanStatus" json:"status,omitempty"`
	// sender is the address of the allowed sender
	Sender string `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgUpdatePlanStatus) Reset()         { *m = MsgUpdatePlanStatus{} }
func (m *MsgUpdatePlanStatus) String() string { return proto.CompactTextString(m) }
func (*MsgUpdatePlanStatus) ProtoMessage()    {}
func (*MsgUpdatePlanStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_f54797b8bf30f2f9, []int{10}
}
func (m *MsgUpdatePlanStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdatePlanStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdatePlanStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdatePlanStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdatePlanStatus.Merge(m, src)
}
func (m *MsgUpdatePlanStatus) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdatePlanStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdatePlanStatus.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdatePlanStatus proto.InternalMessageInfo

func (m *MsgUpdatePlanStatus) GetPlanId() uint64 {
	if m != nil {
		return m.PlanId
	}
	return 0
}

func (m *MsgUpdatePlanStatus) GetStatus() PlanStatus {
	if m != nil {
		return m.Status
	}
	return PlanStatus_Pause
}

func (m *MsgUpdatePlanStatus) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// MsgUpdatePlanStatusResponse is the response type for the Msg/UpdatePlanStatus RPC method.
type MsgUpdatePlanStatusResponse struct {
}

func (m *MsgUpdatePlanStatusResponse) Reset()         { *m = MsgUpdatePlanStatusResponse{} }
func (m *MsgUpdatePlanStatusResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdatePlanStatusResponse) ProtoMessage()    {}
func (*MsgUpdatePlanStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f54797b8bf30f2f9, []int{11}
}
func (m *MsgUpdatePlanStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdatePlanStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdatePlanStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdatePlanStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdatePlanStatusResponse.Merge(m, src)
}
func (m *MsgUpdatePlanStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdatePlanStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdatePlanStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdatePlanStatusResponse proto.InternalMessageInfo

// MsgCreateYAT is the request type for the Msg/CreateYAT RPC method.
type MsgCreateYAT struct {
	// name is the name of the yat contract
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// symbol is the symbol of the yat contract
	Symbol string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// sender is the address of the allowed sender
	Sender string `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgCreateYAT) Reset()         { *m = MsgCreateYAT{} }
func (m *MsgCreateYAT) String() string { return proto.CompactTextString(m) }
func (*MsgCreateYAT) ProtoMessage()    {}
func (*MsgCreateYAT) Descriptor() ([]byte, []int) {
	return fileDescriptor_f54797b8bf30f2f9, []int{12}
}
func (m *MsgCreateYAT) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateYAT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateYAT.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateYAT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateYAT.Merge(m, src)
}
func (m *MsgCreateYAT) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateYAT) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateYAT.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateYAT proto.InternalMessageInfo

func (m *MsgCreateYAT) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgCreateYAT) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *MsgCreateYAT) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// MsgCreateYATResponse is the response type for the Msg/CreateYAT RPC method.
type MsgCreateYATResponse struct {
	// contract_address is the address of the yat contract
	ContractAddress string `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (m *MsgCreateYATResponse) Reset()         { *m = MsgCreateYATResponse{} }
func (m *MsgCreateYATResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateYATResponse) ProtoMessage()    {}
func (*MsgCreateYATResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f54797b8bf30f2f9, []int{13}
}
func (m *MsgCreateYATResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateYATResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateYATResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateYATResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateYATResponse.Merge(m, src)
}
func (m *MsgCreateYATResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateYATResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateYATResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateYATResponse proto.InternalMessageInfo

func (m *MsgCreateYATResponse) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

// MsgSetMinter is the request type for the Msg/SetMinter RPC method.
type MsgSetMinter struct {
	// minter is the address of the minter
	Minter string `protobuf:"bytes,1,opt,name=minter,proto3" json:"minter,omitempty"`
	// contract_address is the address of the yat contract
	ContractAddress string `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	// sender is the address of the allowed sender
	Sender string `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgSetMinter) Reset()         { *m = MsgSetMinter{} }
func (m *MsgSetMinter) String() string { return proto.CompactTextString(m) }
func (*MsgSetMinter) ProtoMessage()    {}
func (*MsgSetMinter) Descriptor() ([]byte, []int) {
	return fileDescriptor_f54797b8bf30f2f9, []int{14}
}
func (m *MsgSetMinter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetMinter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetMinter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetMinter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetMinter.Merge(m, src)
}
func (m *MsgSetMinter) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetMinter) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetMinter.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetMinter proto.InternalMessageInfo

func (m *MsgSetMinter) GetMinter() string {
	if m != nil {
		return m.Minter
	}
	return ""
}

func (m *MsgSetMinter) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *MsgSetMinter) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// MsgSetMinterResponse is the response type for the Msg/SetMinter RPC method.
type MsgSetMinterResponse struct {
}

func (m *MsgSetMinterResponse) Reset()         { *m = MsgSetMinterResponse{} }
func (m *MsgSetMinterResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetMinterResponse) ProtoMessage()    {}
func (*MsgSetMinterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f54797b8bf30f2f9, []int{15}
}
func (m *MsgSetMinterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetMinterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetMinterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetMinterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetMinterResponse.Merge(m, src)
}
func (m *MsgSetMinterResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetMinterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetMinterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetMinterResponse proto.InternalMessageInfo

// MsgRemoveMinter is the request type for the Msg/RemoveMinter RPC method.
type MsgRemoveMinter struct {
	// minter is the address of the minter
	Minter string `protobuf:"bytes,1,opt,name=minter,proto3" json:"minter,omitempty"`
	// contract_address is the address of the yat contract
	ContractAddress string `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	// sender is the address of the allowed sender
	Sender string `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgRemoveMinter) Reset()         { *m = MsgRemoveMinter{} }
func (m *MsgRemoveMinter) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveMinter) ProtoMessage()    {}
func (*MsgRemoveMinter) Descriptor() ([]byte, []int) {
	return fileDescriptor_f54797b8bf30f2f9, []int{16}
}
func (m *MsgRemoveMinter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveMinter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveMinter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveMinter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveMinter.Merge(m, src)
}
func (m *MsgRemoveMinter) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveMinter) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveMinter.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveMinter proto.InternalMessageInfo

func (m *MsgRemoveMinter) GetMinter() string {
	if m != nil {
		return m.Minter
	}
	return ""
}

func (m *MsgRemoveMinter) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *MsgRemoveMinter) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// MsgRemoveMinterResponse is the response type for the Msg/RemoveMinter RPC method.
type MsgRemoveMinterResponse struct {
}

func (m *MsgRemoveMinterResponse) Reset()         { *m = MsgRemoveMinterResponse{} }
func (m *MsgRemoveMinterResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveMinterResponse) ProtoMessage()    {}
func (*MsgRemoveMinterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f54797b8bf30f2f9, []int{17}
}
func (m *MsgRemoveMinterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveMinterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveMinterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveMinterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveMinterResponse.Merge(m, src)
}
func (m *MsgRemoveMinterResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveMinterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveMinterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveMinterResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgUpdateParams)(nil), "lorenzo.plan.v1.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "lorenzo.plan.v1.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgUpgradePlan)(nil), "lorenzo.plan.v1.MsgUpgradePlan")
	proto.RegisterType((*MsgUpgradePlanResponse)(nil), "lorenzo.plan.v1.MsgUpgradePlanResponse")
	proto.RegisterType((*MsgCreatePlan)(nil), "lorenzo.plan.v1.MsgCreatePlan")
	proto.RegisterType((*MsgCreatePlanResponse)(nil), "lorenzo.plan.v1.MsgCreatePlanResponse")
	proto.RegisterType((*MsgSetMerkleRoot)(nil), "lorenzo.plan.v1.MsgSetMerkleRoot")
	proto.RegisterType((*MsgSetMerkleRootResponse)(nil), "lorenzo.plan.v1.MsgSetMerkleRootResponse")
	proto.RegisterType((*MsgClaims)(nil), "lorenzo.plan.v1.MsgClaims")
	proto.RegisterType((*MsgClaimsResponse)(nil), "lorenzo.plan.v1.MsgClaimsResponse")
	proto.RegisterType((*MsgUpdatePlanStatus)(nil), "lorenzo.plan.v1.MsgUpdatePlanStatus")
	proto.RegisterType((*MsgUpdatePlanStatusResponse)(nil), "lorenzo.plan.v1.MsgUpdatePlanStatusResponse")
	proto.RegisterType((*MsgCreateYAT)(nil), "lorenzo.plan.v1.MsgCreateYAT")
	proto.RegisterType((*MsgCreateYATResponse)(nil), "lorenzo.plan.v1.MsgCreateYATResponse")
	proto.RegisterType((*MsgSetMinter)(nil), "lorenzo.plan.v1.MsgSetMinter")
	proto.RegisterType((*MsgSetMinterResponse)(nil), "lorenzo.plan.v1.MsgSetMinterResponse")
	proto.RegisterType((*MsgRemoveMinter)(nil), "lorenzo.plan.v1.MsgRemoveMinter")
	proto.RegisterType((*MsgRemoveMinterResponse)(nil), "lorenzo.plan.v1.MsgRemoveMinterResponse")
}

func init() { proto.RegisterFile("lorenzo/plan/v1/tx.proto", fileDescriptor_f54797b8bf30f2f9) }

var fileDescriptor_f54797b8bf30f2f9 = []byte{
	// 1002 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0x4d, 0x4f, 0x1b, 0x47,
	0x18, 0x66, 0x8d, 0xb3, 0xc0, 0x6b, 0x63, 0xe8, 0x84, 0xc2, 0xb2, 0x29, 0x86, 0x58, 0x2d, 0x21,
	0x51, 0xb1, 0x09, 0x51, 0x7b, 0xc8, 0x0d, 0x52, 0x55, 0x75, 0x55, 0x4b, 0x74, 0x21, 0x6a, 0x13,
	0xa9, 0xb2, 0x96, 0xdd, 0xc9, 0x66, 0x85, 0x77, 0xc7, 0x9a, 0x19, 0xa3, 0xb8, 0xa7, 0x28, 0xd7,
	0x5e, 0x22, 0xf5, 0x1f, 0xf4, 0xd8, 0x53, 0x0e, 0xed, 0x7f, 0xc8, 0x31, 0xea, 0xa9, 0xea, 0x21,
	0xaa, 0xe0, 0x90, 0xbf, 0x51, 0xcd, 0x87, 0xc7, 0x5f, 0x0b, 0xa4, 0x70, 0xc9, 0xc9, 0x9e, 0x7d,
	0x9f, 0xf7, 0x99, 0xe7, 0xfd, 0x98, 0x79, 0x07, 0x9c, 0x16, 0xa1, 0x38, 0xfd, 0x99, 0xd4, 0xda,
	0x2d, 0x3f, 0xad, 0x1d, 0xdf, 0xad, 0xf1, 0x67, 0xd5, 0x36, 0x25, 0x9c, 0xa0, 0x39, 0x6d, 0xa9,
	0x0a, 0x4b, 0xf5, 0xf8, 0xae, 0xbb, 0x1c, 0x10, 0x96, 0x10, 0xd6, 0x94, 0xe6, 0x9a, 0x5a, 0x28,
	0xac, 0xbb, 0xa4, 0x56, 0xb5, 0x84, 0x45, 0x82, 0x23, 0x61, 0x91, 0x36, 0x2c, 0x44, 0x24, 0x22,
	0xca, 0x41, 0xfc, 0xd3, 0x5f, 0x3f, 0x19, 0xdd, 0xb4, 0xed, 0x53, 0x3f, 0xe9, 0x91, 0xb9, 0x63,
	0x56, 0x21, 0x40, 0xda, 0x2a, 0x2f, 0x2d, 0x98, 0x6b, 0xb0, 0xe8, 0x61, 0x3b, 0xf4, 0x39, 0xde,
	0x93, 0x5e, 0xe8, 0x4b, 0x98, 0xf1, 0x3b, 0xfc, 0x29, 0xa1, 0x31, 0xef, 0x3a, 0xd6, 0x9a, 0xb5,
	0x31, 0xb3, 0xeb, 0xfc, 0xf5, 0xc7, 0xe6, 0x82, 0x56, 0xb8, 0x13, 0x86, 0x14, 0x33, 0xb6, 0xcf,
	0x69, 0x9c, 0x46, 0x5e, 0x1f, 0x8a, 0xbe, 0x00, 0x5b, 0xed, 0xeb, 0xe4, 0xd6, 0xac, 0x8d, 0xc2,
	0xf6, 0x52, 0x75, 0x24, 0xe2, 0xaa, 0xda, 0x60, 0x37, 0xff, 0xfa, 0xed, 0xea, 0x84, 0xa7, 0xc1,
	0xf7, 0x4b, 0x2f, 0xde, 0xbd, 0xba, 0xd3, 0xa7, 0xa9, 0x2c, 0xc3, 0xd2, 0x88, 0x22, 0x0f, 0xb3,
	0x36, 0x49, 0x19, 0xae, 0x3c, 0xb7, 0xa0, 0x24, 0x6d, 0x11, 0xf5, 0x43, 0xbc, 0xd7, 0xf2, 0x53,
	0xb4, 0x0e, 0xa5, 0x38, 0x69, 0xb7, 0x70, 0x82, 0x53, 0xee, 0xf3, 0x98, 0xa4, 0x4a, 0xb1, 0x37,
	0xf2, 0x75, 0x38, 0xa8, 0xdc, 0x7b, 0x07, 0x35, 0xa6, 0xce, 0x81, 0xc5, 0x61, 0x05, 0x46, 0xdc,
	0x8b, 0x49, 0x98, 0x6d, 0xb0, 0xe8, 0x01, 0xc5, 0x42, 0xb8, 0xd0, 0x86, 0x20, 0x9f, 0xfa, 0x09,
	0xd6, 0x8a, 0xe4, 0x7f, 0x54, 0x81, 0x59, 0x91, 0x8d, 0x66, 0x88, 0x59, 0xd0, 0xec, 0xd0, 0x58,
	0x69, 0xf1, 0x0a, 0xe2, 0xe3, 0x57, 0x98, 0x05, 0x0f, 0x69, 0x8c, 0x96, 0x61, 0xda, 0x8f, 0x70,
	0xca, 0x9b, 0x71, 0xe8, 0x4c, 0xae, 0x59, 0x1b, 0x79, 0x6f, 0x4a, 0xae, 0xeb, 0x21, 0xfa, 0x11,
	0xe6, 0xa5, 0x3b, 0xe3, 0x3e, 0xe5, 0xcd, 0xc3, 0x16, 0x09, 0x8e, 0x9c, 0xbc, 0x8c, 0xa6, 0x2a,
	0x92, 0xfa, 0xcf, 0xdb, 0xd5, 0xf5, 0x28, 0xe6, 0x4f, 0x3b, 0x87, 0xd5, 0x80, 0x24, 0xba, 0xa7,
	0xf4, 0xcf, 0x26, 0x0b, 0x8f, 0x6a, 0xbc, 0xdb, 0xc6, 0xac, 0x5a, 0x4f, 0xb9, 0x57, 0x12, 0x3c,
	0xfb, 0x82, 0x66, 0x57, 0xb0, 0xa0, 0x7d, 0x98, 0x6d, 0x63, 0x1a, 0x93, 0x50, 0xb1, 0x32, 0xe7,
	0xda, 0xa5, 0x68, 0x8b, 0x8a, 0x44, 0x72, 0x32, 0xb4, 0x05, 0x0b, 0x5d, 0x9f, 0x37, 0x03, 0x92,
	0x72, 0xea, 0x07, 0xbc, 0xe9, 0xab, 0x34, 0x3b, 0xb6, 0x0c, 0x1a, 0x75, 0x7d, 0xfe, 0x40, 0x9b,
	0x74, 0x01, 0xd0, 0x16, 0xd8, 0x0c, 0xa7, 0x21, 0xa6, 0xce, 0xd4, 0x05, 0x45, 0xd2, 0xb8, 0xfb,
	0x05, 0x51, 0x21, 0xbd, 0xa8, 0xdc, 0x82, 0x8f, 0x87, 0x6a, 0xd0, 0xab, 0x0e, 0x2a, 0x41, 0x2e,
	0x0e, 0x65, 0x25, 0xf2, 0x5e, 0x2e, 0x0e, 0x2b, 0xbf, 0x58, 0x30, 0xdf, 0x60, 0xd1, 0x3e, 0xe6,
	0x0d, 0x4c, 0x8f, 0x5a, 0xd8, 0x23, 0x84, 0xa3, 0x25, 0x98, 0x92, 0xd9, 0x35, 0x48, 0x5b, 0x2c,
	0xeb, 0x21, 0x5a, 0x85, 0x42, 0x22, 0x61, 0x4d, 0x4a, 0x08, 0xd7, 0x35, 0x83, 0xa4, 0xef, 0xd9,
	0x97, 0x3d, 0x79, 0x19, 0xd9, 0x2e, 0x38, 0xa3, 0x62, 0x4c, 0x5f, 0xfd, 0x99, 0x83, 0x19, 0x11,
	0x53, 0xcb, 0x8f, 0x13, 0x76, 0xb6, 0x44, 0x17, 0xa6, 0x29, 0x0e, 0x70, 0x7c, 0x8c, 0xa9, 0xd6,
	0x67, 0xd6, 0xa8, 0x0e, 0xd3, 0x94, 0x74, 0xd2, 0xb0, 0xd7, 0x50, 0xff, 0xbf, 0xac, 0x53, 0xd2,
	0xbf, 0x1e, 0xa2, 0xaf, 0xc1, 0xf6, 0x13, 0xd2, 0x49, 0xf9, 0x25, 0xdb, 0x4e, 0x7b, 0xa3, 0x9b,
	0x50, 0xd4, 0x19, 0x6d, 0x53, 0x42, 0x9e, 0xa8, 0x6e, 0xf3, 0x74, 0x96, 0xf7, 0xc4, 0xa7, 0x81,
	0x9c, 0xda, 0x97, 0xc9, 0xe9, 0x75, 0xf8, 0xc8, 0xa4, 0xcd, 0x24, 0xf3, 0x37, 0x0b, 0xae, 0xf7,
	0x6f, 0x17, 0x75, 0x02, 0x78, 0xe7, 0x9c, 0xb4, 0xde, 0x03, 0x9b, 0x49, 0x88, 0x4c, 0x6a, 0x69,
	0xfb, 0xc6, 0xf8, 0xa5, 0x66, 0x58, 0x3c, 0x0d, 0xbd, 0x6a, 0x37, 0xac, 0xc0, 0x8d, 0x0c, 0x8d,
	0x26, 0x86, 0x2e, 0x14, 0x4d, 0x8f, 0x3f, 0xda, 0x39, 0xc8, 0xbc, 0x66, 0x16, 0xc1, 0x66, 0xdd,
	0xe4, 0x90, 0xb4, 0x74, 0x2f, 0xe8, 0xd5, 0x55, 0x95, 0xed, 0xc0, 0xc2, 0xe0, 0xd6, 0xe6, 0x74,
	0xdd, 0x86, 0xf9, 0xb1, 0x33, 0xae, 0xe4, 0xcc, 0x05, 0xc3, 0x07, 0x5c, 0x4c, 0x9c, 0xa2, 0xee,
	0xf5, 0x38, 0xe5, 0x98, 0x0a, 0xa9, 0x89, 0xfc, 0xa7, 0x3d, 0xf4, 0x2a, 0x93, 0x33, 0x97, 0xc9,
	0x79, 0xd5, 0xa8, 0x16, 0x65, 0x54, 0x46, 0x91, 0x49, 0xf4, 0xaf, 0x6a, 0x38, 0x7a, 0x38, 0x21,
	0xc7, 0xf8, 0x83, 0x51, 0xab, 0xe6, 0xe3, 0xa0, 0xa8, 0x9e, 0xe0, 0xed, 0xdf, 0x6d, 0x98, 0x6c,
	0xb0, 0x08, 0x3d, 0x86, 0xe2, 0xd0, 0x44, 0x5f, 0x1b, 0x6b, 0xda, 0x91, 0x09, 0xeb, 0x6e, 0x5c,
	0x84, 0x30, 0xa5, 0xfe, 0x01, 0x0a, 0x83, 0xf3, 0x77, 0x35, 0xdb, 0xd1, 0x00, 0xdc, 0x5b, 0x17,
	0x00, 0x0c, 0xf1, 0x01, 0xc0, 0xc0, 0xec, 0x2c, 0x67, 0xb9, 0xf5, 0xed, 0xee, 0xfa, 0xf9, 0x76,
	0xc3, 0xfa, 0x13, 0xcc, 0x0e, 0xdf, 0xf1, 0x37, 0xb3, 0x1c, 0x87, 0x20, 0xee, 0xed, 0x0b, 0x21,
	0x86, 0xfe, 0x1b, 0xb0, 0xf5, 0xc5, 0xec, 0x66, 0x0a, 0x92, 0x36, 0xb7, 0x72, 0xb6, 0xcd, 0x30,
	0x3d, 0x81, 0xf9, 0xb1, 0x5b, 0xe9, 0xd3, 0x73, 0xaa, 0x62, 0x50, 0xee, 0xe7, 0xef, 0x83, 0x32,
	0xfb, 0x7c, 0x0f, 0x33, 0xfd, 0xab, 0x63, 0xe5, 0xec, 0x2c, 0x3e, 0xda, 0x39, 0x70, 0x3f, 0x3b,
	0xd7, 0x3c, 0x48, 0xd9, 0x3f, 0xce, 0x2b, 0x67, 0x25, 0x4f, 0x9a, 0xb3, 0x29, 0xc7, 0x8e, 0x9e,
	0xe8, 0xe0, 0xa1, 0x63, 0x97, 0xd9, 0xc1, 0x83, 0x88, 0xec, 0x0e, 0xce, 0x3a, 0x25, 0xee, 0xb5,
	0xe7, 0xef, 0x5e, 0xdd, 0xb1, 0x76, 0xbf, 0x7d, 0x7d, 0x52, 0xb6, 0xde, 0x9c, 0x94, 0xad, 0x7f,
	0x4f, 0xca, 0xd6, 0xcb, 0xd3, 0xf2, 0xc4, 0x9b, 0xd3, 0xf2, 0xc4, 0xdf, 0xa7, 0xe5, 0x89, 0xc7,
	0x5b, 0x03, 0xb3, 0xec, 0x3b, 0x45, 0xba, 0xb9, 0x27, 0x9e, 0xcb, 0x01, 0x69, 0xd5, 0x7a, 0x8f,
	0xe9, 0x67, 0xea, 0x39, 0x2d, 0x27, 0xdb, 0xa1, 0x2d, 0x5f, 0xd3, 0xf7, 0xfe, 0x0b, 0x00, 0x00,
	0xff, 0xff, 0x28, 0xca, 0x53, 0x1a, 0xfe, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a method for updating the plan parameters.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	// UpgradePlan defines a governance operation for upgrading an Plan contract
	UpgradePlan(ctx context.Context, in *MsgUpgradePlan, opts ...grpc.CallOption) (*MsgUpgradePlanResponse, error)
	// CreatePlan defines a method for creating a new plan.
	CreatePlan(ctx context.Context, in *MsgCreatePlan, opts ...grpc.CallOption) (*MsgCreatePlanResponse, error)
	// SetMerkleRoot defines a method for setting the merkle root of the plan.
	SetMerkleRoot(ctx context.Context, in *MsgSetMerkleRoot, opts ...grpc.CallOption) (*MsgSetMerkleRootResponse, error)
	// CreateClaim defines a method for claims rewards to sender.
	Claims(ctx context.Context, in *MsgClaims, opts ...grpc.CallOption) (*MsgClaimsResponse, error)
	// UpdatePlanStatus defines a method for updating the plan status.
	UpdatePlanStatus(ctx context.Context, in *MsgUpdatePlanStatus, opts ...grpc.CallOption) (*MsgUpdatePlanStatusResponse, error)
	// CreateYAT defines a method for creating a new YAT contract.
	CreateYAT(ctx context.Context, in *MsgCreateYAT, opts ...grpc.CallOption) (*MsgCreateYATResponse, error)
	// SetMinter defines a method for setting minter of the YAT contract.
	SetMinter(ctx context.Context, in *MsgSetMinter, opts ...grpc.CallOption) (*MsgSetMinterResponse, error)
	// RemoveMinter defines a method for removing minter of the YAT contract.
	RemoveMinter(ctx context.Context, in *MsgRemoveMinter, opts ...grpc.CallOption) (*MsgRemoveMinterResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/lorenzo.plan.v1.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpgradePlan(ctx context.Context, in *MsgUpgradePlan, opts ...grpc.CallOption) (*MsgUpgradePlanResponse, error) {
	out := new(MsgUpgradePlanResponse)
	err := c.cc.Invoke(ctx, "/lorenzo.plan.v1.Msg/UpgradePlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreatePlan(ctx context.Context, in *MsgCreatePlan, opts ...grpc.CallOption) (*MsgCreatePlanResponse, error) {
	out := new(MsgCreatePlanResponse)
	err := c.cc.Invoke(ctx, "/lorenzo.plan.v1.Msg/CreatePlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetMerkleRoot(ctx context.Context, in *MsgSetMerkleRoot, opts ...grpc.CallOption) (*MsgSetMerkleRootResponse, error) {
	out := new(MsgSetMerkleRootResponse)
	err := c.cc.Invoke(ctx, "/lorenzo.plan.v1.Msg/SetMerkleRoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Claims(ctx context.Context, in *MsgClaims, opts ...grpc.CallOption) (*MsgClaimsResponse, error) {
	out := new(MsgClaimsResponse)
	err := c.cc.Invoke(ctx, "/lorenzo.plan.v1.Msg/Claims", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdatePlanStatus(ctx context.Context, in *MsgUpdatePlanStatus, opts ...grpc.CallOption) (*MsgUpdatePlanStatusResponse, error) {
	out := new(MsgUpdatePlanStatusResponse)
	err := c.cc.Invoke(ctx, "/lorenzo.plan.v1.Msg/UpdatePlanStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateYAT(ctx context.Context, in *MsgCreateYAT, opts ...grpc.CallOption) (*MsgCreateYATResponse, error) {
	out := new(MsgCreateYATResponse)
	err := c.cc.Invoke(ctx, "/lorenzo.plan.v1.Msg/CreateYAT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetMinter(ctx context.Context, in *MsgSetMinter, opts ...grpc.CallOption) (*MsgSetMinterResponse, error) {
	out := new(MsgSetMinterResponse)
	err := c.cc.Invoke(ctx, "/lorenzo.plan.v1.Msg/SetMinter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveMinter(ctx context.Context, in *MsgRemoveMinter, opts ...grpc.CallOption) (*MsgRemoveMinterResponse, error) {
	out := new(MsgRemoveMinterResponse)
	err := c.cc.Invoke(ctx, "/lorenzo.plan.v1.Msg/RemoveMinter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// UpdateParams defines a method for updating the plan parameters.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	// UpgradePlan defines a governance operation for upgrading an Plan contract
	UpgradePlan(context.Context, *MsgUpgradePlan) (*MsgUpgradePlanResponse, error)
	// CreatePlan defines a method for creating a new plan.
	CreatePlan(context.Context, *MsgCreatePlan) (*MsgCreatePlanResponse, error)
	// SetMerkleRoot defines a method for setting the merkle root of the plan.
	SetMerkleRoot(context.Context, *MsgSetMerkleRoot) (*MsgSetMerkleRootResponse, error)
	// CreateClaim defines a method for claims rewards to sender.
	Claims(context.Context, *MsgClaims) (*MsgClaimsResponse, error)
	// UpdatePlanStatus defines a method for updating the plan status.
	UpdatePlanStatus(context.Context, *MsgUpdatePlanStatus) (*MsgUpdatePlanStatusResponse, error)
	// CreateYAT defines a method for creating a new YAT contract.
	CreateYAT(context.Context, *MsgCreateYAT) (*MsgCreateYATResponse, error)
	// SetMinter defines a method for setting minter of the YAT contract.
	SetMinter(context.Context, *MsgSetMinter) (*MsgSetMinterResponse, error)
	// RemoveMinter defines a method for removing minter of the YAT contract.
	RemoveMinter(context.Context, *MsgRemoveMinter) (*MsgRemoveMinterResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) UpgradePlan(ctx context.Context, req *MsgUpgradePlan) (*MsgUpgradePlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradePlan not implemented")
}
func (*UnimplementedMsgServer) CreatePlan(ctx context.Context, req *MsgCreatePlan) (*MsgCreatePlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlan not implemented")
}
func (*UnimplementedMsgServer) SetMerkleRoot(ctx context.Context, req *MsgSetMerkleRoot) (*MsgSetMerkleRootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMerkleRoot not implemented")
}
func (*UnimplementedMsgServer) Claims(ctx context.Context, req *MsgClaims) (*MsgClaimsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Claims not implemented")
}
func (*UnimplementedMsgServer) UpdatePlanStatus(ctx context.Context, req *MsgUpdatePlanStatus) (*MsgUpdatePlanStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlanStatus not implemented")
}
func (*UnimplementedMsgServer) CreateYAT(ctx context.Context, req *MsgCreateYAT) (*MsgCreateYATResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateYAT not implemented")
}
func (*UnimplementedMsgServer) SetMinter(ctx context.Context, req *MsgSetMinter) (*MsgSetMinterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMinter not implemented")
}
func (*UnimplementedMsgServer) RemoveMinter(ctx context.Context, req *MsgRemoveMinter) (*MsgRemoveMinterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMinter not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lorenzo.plan.v1.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpgradePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpgradePlan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpgradePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lorenzo.plan.v1.Msg/UpgradePlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpgradePlan(ctx, req.(*MsgUpgradePlan))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreatePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreatePlan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreatePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lorenzo.plan.v1.Msg/CreatePlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreatePlan(ctx, req.(*MsgCreatePlan))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetMerkleRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetMerkleRoot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetMerkleRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lorenzo.plan.v1.Msg/SetMerkleRoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetMerkleRoot(ctx, req.(*MsgSetMerkleRoot))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Claims_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaims)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Claims(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lorenzo.plan.v1.Msg/Claims",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Claims(ctx, req.(*MsgClaims))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdatePlanStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdatePlanStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdatePlanStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lorenzo.plan.v1.Msg/UpdatePlanStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdatePlanStatus(ctx, req.(*MsgUpdatePlanStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateYAT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateYAT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateYAT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lorenzo.plan.v1.Msg/CreateYAT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateYAT(ctx, req.(*MsgCreateYAT))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetMinter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetMinter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetMinter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lorenzo.plan.v1.Msg/SetMinter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetMinter(ctx, req.(*MsgSetMinter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveMinter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveMinter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveMinter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lorenzo.plan.v1.Msg/RemoveMinter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveMinter(ctx, req.(*MsgRemoveMinter))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lorenzo.plan.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "UpgradePlan",
			Handler:    _Msg_UpgradePlan_Handler,
		},
		{
			MethodName: "CreatePlan",
			Handler:    _Msg_CreatePlan_Handler,
		},
		{
			MethodName: "SetMerkleRoot",
			Handler:    _Msg_SetMerkleRoot_Handler,
		},
		{
			MethodName: "Claims",
			Handler:    _Msg_Claims_Handler,
		},
		{
			MethodName: "UpdatePlanStatus",
			Handler:    _Msg_UpdatePlanStatus_Handler,
		},
		{
			MethodName: "CreateYAT",
			Handler:    _Msg_CreateYAT_Handler,
		},
		{
			MethodName: "SetMinter",
			Handler:    _Msg_SetMinter_Handler,
		},
		{
			MethodName: "RemoveMinter",
			Handler:    _Msg_RemoveMinter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorenzo/plan/v1/tx.proto",
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpgradePlan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpgradePlan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpgradePlan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Implementation) > 0 {
		i -= len(m.Implementation)
		copy(dAtA[i:], m.Implementation)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Implementation)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpgradePlanResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpgradePlanResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpgradePlanResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreatePlan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreatePlan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreatePlan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.YatContractAddress) > 0 {
		i -= len(m.YatContractAddress)
		copy(dAtA[i:], m.YatContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.YatContractAddress)))
		i--
		dAtA[i] = 0x32
	}
	{
		size := m.PeriodBlocks.Size()
		i -= size
		if _, err := m.PeriodBlocks.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.PlanStartBlock.Size()
		i -= size
		if _, err := m.PlanStartBlock.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.AgentId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AgentId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.PlanDescUri) > 0 {
		i -= len(m.PlanDescUri)
		copy(dAtA[i:], m.PlanDescUri)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PlanDescUri)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreatePlanResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreatePlanResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreatePlanResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetMerkleRoot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetMerkleRoot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetMerkleRoot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MerkleRoot) > 0 {
		i -= len(m.MerkleRoot)
		copy(dAtA[i:], m.MerkleRoot)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MerkleRoot)))
		i--
		dAtA[i] = 0x12
	}
	if m.PlanId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PlanId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetMerkleRootResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetMerkleRootResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetMerkleRootResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgClaims) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaims) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaims) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.MerkleProof) > 0 {
		i -= len(m.MerkleProof)
		copy(dAtA[i:], m.MerkleProof)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MerkleProof)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.RoundId.Size()
		i -= size
		if _, err := m.RoundId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x12
	}
	if m.PlanId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PlanId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdatePlanStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdatePlanStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdatePlanStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.PlanId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PlanId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdatePlanStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdatePlanStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdatePlanStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateYAT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateYAT) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateYAT) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateYATResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateYATResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateYATResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetMinter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetMinter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetMinter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Minter) > 0 {
		i -= len(m.Minter)
		copy(dAtA[i:], m.Minter)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Minter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetMinterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetMinterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetMinterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRemoveMinter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveMinter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveMinter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Minter) > 0 {
		i -= len(m.Minter)
		copy(dAtA[i:], m.Minter)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Minter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveMinterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveMinterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveMinterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpgradePlan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Implementation)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpgradePlanResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreatePlan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PlanDescUri)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.AgentId != 0 {
		n += 1 + sovTx(uint64(m.AgentId))
	}
	l = m.PlanStartBlock.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.PeriodBlocks.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.YatContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreatePlanResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgSetMerkleRoot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlanId != 0 {
		n += 1 + sovTx(uint64(m.PlanId))
	}
	l = len(m.MerkleRoot)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetMerkleRootResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgClaims) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlanId != 0 {
		n += 1 + sovTx(uint64(m.PlanId))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.RoundId.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.MerkleProof)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgClaimsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdatePlanStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlanId != 0 {
		n += 1 + sovTx(uint64(m.PlanId))
	}
	if m.Status != 0 {
		n += 1 + sovTx(uint64(m.Status))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdatePlanStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateYAT) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateYATResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetMinter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Minter)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetMinterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRemoveMinter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Minter)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRemoveMinterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpgradePlan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpgradePlan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpgradePlan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Implementation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Implementation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpgradePlanResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpgradePlanResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpgradePlanResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreatePlan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreatePlan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreatePlan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanDescUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlanDescUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentId", wireType)
			}
			m.AgentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AgentId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanStartBlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PlanStartBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodBlocks", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PeriodBlocks.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field YatContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.YatContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreatePlanResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreatePlanResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreatePlanResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetMerkleRoot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetMerkleRoot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetMerkleRoot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanId", wireType)
			}
			m.PlanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlanId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerkleRoot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MerkleRoot = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetMerkleRootResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetMerkleRootResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetMerkleRootResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaims) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaims: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaims: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanId", wireType)
			}
			m.PlanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlanId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RoundId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerkleProof", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MerkleProof = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdatePlanStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdatePlanStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdatePlanStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanId", wireType)
			}
			m.PlanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlanId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= PlanStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdatePlanStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdatePlanStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdatePlanStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateYAT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateYAT: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateYAT: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateYATResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateYATResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateYATResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetMinter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetMinter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetMinter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Minter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetMinterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetMinterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetMinterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveMinter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveMinter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveMinter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Minter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveMinterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveMinterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveMinterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
