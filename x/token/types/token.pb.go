// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorenzo/token/v1/token.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/x/bank/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Source defines the source type of token asset, if source is:
// - module: token origin is sdk module;
// - contract: token origin is erc20 contract;
type Source int32

const (
	// undefined source
	OWNER_UNDEFINED Source = 0
	// token source is module
	OWNER_MODULE Source = 1
	// token source is erc20 contract
	OWNER_CONTRACT Source = 2
)

var Source_name = map[int32]string{
	0: "OWNER_UNDEFINED",
	1: "OWNER_MODULE",
	2: "OWNER_CONTRACT",
}

var Source_value = map[string]int32{
	"OWNER_UNDEFINED": 0,
	"OWNER_MODULE":    1,
	"OWNER_CONTRACT":  2,
}

func (x Source) String() string {
	return proto.EnumName(Source_name, int32(x))
}

func (Source) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1095540cf3b10f35, []int{0}
}

// TokenPair defines a pairing of a cosmos coin and an erc20 token
type TokenPair struct {
	// erc20 contract hex format address
	ContractAddress string `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	// sdk coin base denomination
	Denom string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	// allows for token conversion
	Enabled bool `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// source of token asset
	Source Source `protobuf:"varint,4,opt,name=source,proto3,enum=lorenzo.token.v1.Source" json:"source,omitempty"`
}

func (m *TokenPair) Reset()         { *m = TokenPair{} }
func (m *TokenPair) String() string { return proto.CompactTextString(m) }
func (*TokenPair) ProtoMessage()    {}
func (*TokenPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_1095540cf3b10f35, []int{0}
}
func (m *TokenPair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenPair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenPair.Merge(m, src)
}
func (m *TokenPair) XXX_Size() int {
	return m.Size()
}
func (m *TokenPair) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenPair.DiscardUnknown(m)
}

var xxx_messageInfo_TokenPair proto.InternalMessageInfo

func (m *TokenPair) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *TokenPair) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *TokenPair) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *TokenPair) GetSource() Source {
	if m != nil {
		return m.Source
	}
	return OWNER_UNDEFINED
}

func init() {
	proto.RegisterEnum("lorenzo.token.v1.Source", Source_name, Source_value)
	proto.RegisterType((*TokenPair)(nil), "lorenzo.token.v1.TokenPair")
}

func init() { proto.RegisterFile("lorenzo/token/v1/token.proto", fileDescriptor_1095540cf3b10f35) }

var fileDescriptor_1095540cf3b10f35 = []byte{
	// 340 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0x4f, 0x4b, 0x02, 0x41,
	0x18, 0xc6, 0x77, 0xcc, 0x2c, 0x87, 0xd0, 0x65, 0xf2, 0xb0, 0x48, 0x4c, 0xd2, 0xc9, 0x82, 0x76,
	0xda, 0xba, 0x75, 0x33, 0xdd, 0x40, 0xb2, 0x55, 0x36, 0x25, 0xe8, 0x22, 0xfb, 0x67, 0x30, 0x51,
	0xf7, 0x95, 0x9d, 0x51, 0xaa, 0x4f, 0xd0, 0xb1, 0x4f, 0x10, 0x41, 0x5f, 0xa6, 0xa3, 0xc7, 0x8e,
	0xa1, 0x97, 0x3e, 0x46, 0xb8, 0xe3, 0x5e, 0xba, 0x3d, 0xcf, 0xef, 0x99, 0x19, 0xe6, 0x7d, 0x1f,
	0x7c, 0x30, 0x86, 0x98, 0x47, 0x2f, 0xc0, 0x24, 0x8c, 0x78, 0xc4, 0xe6, 0x96, 0x12, 0xe6, 0x34,
	0x06, 0x09, 0x44, 0xdf, 0xa4, 0xa6, 0x82, 0x73, 0xab, 0x4c, 0x03, 0x10, 0x13, 0x10, 0xcc, 0xf7,
	0xa2, 0x11, 0x9b, 0x5b, 0x3e, 0x97, 0x9e, 0x95, 0x18, 0x75, 0xa3, 0x5c, 0x1a, 0xc0, 0x00, 0x12,
	0xc9, 0xd6, 0x4a, 0xd1, 0xa3, 0x77, 0x84, 0xf3, 0xdd, 0xf5, 0x13, 0x1d, 0x6f, 0x18, 0x93, 0x63,
	0xac, 0x07, 0x10, 0xc9, 0xd8, 0x0b, 0x64, 0xdf, 0x0b, 0xc3, 0x98, 0x0b, 0x61, 0xa0, 0x0a, 0xaa,
	0xe6, 0xdd, 0x62, 0xca, 0x6b, 0x0a, 0x93, 0x12, 0xde, 0x0e, 0x79, 0x04, 0x13, 0x23, 0x93, 0xe4,
	0xca, 0x10, 0x03, 0xef, 0xf0, 0xc8, 0xf3, 0xc7, 0x3c, 0x34, 0xb6, 0x2a, 0xa8, 0xba, 0xeb, 0xa6,
	0x96, 0x9c, 0xe1, 0x9c, 0x80, 0x59, 0x1c, 0x70, 0x23, 0x5b, 0x41, 0xd5, 0xc2, 0xb9, 0x61, 0xfe,
	0x9f, 0xc0, 0xbc, 0x4b, 0x72, 0x77, 0x73, 0xee, 0x32, 0xfb, 0xfb, 0x71, 0x88, 0x4e, 0x9a, 0x38,
	0xa7, 0x38, 0xd9, 0xc7, 0xc5, 0xf6, 0xbd, 0x63, 0xbb, 0xfd, 0x9e, 0xd3, 0xb0, 0xaf, 0x9b, 0x8e,
	0xdd, 0xd0, 0x35, 0xa2, 0xe3, 0x3d, 0x05, 0x6f, 0xdb, 0x8d, 0x5e, 0xcb, 0xd6, 0x11, 0x21, 0xb8,
	0xa0, 0x48, 0xbd, 0xed, 0x74, 0xdd, 0x5a, 0xbd, 0xab, 0x67, 0xca, 0xd9, 0xd7, 0x4f, 0xaa, 0x5d,
	0xdd, 0x7c, 0x2d, 0x29, 0x5a, 0x2c, 0x29, 0xfa, 0x59, 0x52, 0xf4, 0xb6, 0xa2, 0xda, 0x62, 0x45,
	0xb5, 0xef, 0x15, 0xd5, 0x1e, 0xac, 0xc1, 0x50, 0x3e, 0xce, 0x7c, 0x33, 0x80, 0x09, 0x6b, 0xa9,
	0x6f, 0x9d, 0x76, 0xd6, 0xfb, 0x09, 0x60, 0xcc, 0xd2, 0x1e, 0x9e, 0x36, 0x4d, 0xc8, 0xe7, 0x29,
	0x17, 0x7e, 0x2e, 0xd9, 0xdf, 0xc5, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1d, 0x39, 0x77, 0x0a,
	0xa7, 0x01, 0x00, 0x00,
}

func (this *TokenPair) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TokenPair)
	if !ok {
		that2, ok := that.(TokenPair)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ContractAddress != that1.ContractAddress {
		return false
	}
	if this.Denom != that1.Denom {
		return false
	}
	if this.Enabled != that1.Enabled {
		return false
	}
	if this.Source != that1.Source {
		return false
	}
	return true
}
func (m *TokenPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenPair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenPair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Source != 0 {
		i = encodeVarintToken(dAtA, i, uint64(m.Source))
		i--
		dAtA[i] = 0x20
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintToken(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintToken(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintToken(dAtA []byte, offset int, v uint64) int {
	offset -= sovToken(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TokenPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovToken(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovToken(uint64(l))
	}
	if m.Enabled {
		n += 2
	}
	if m.Source != 0 {
		n += 1 + sovToken(uint64(m.Source))
	}
	return n
}

func sovToken(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozToken(x uint64) (n int) {
	return sovToken(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TokenPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowToken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= Source(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipToken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthToken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipToken(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowToken
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowToken
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowToken
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthToken
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupToken
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthToken
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthToken        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowToken          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupToken = fmt.Errorf("proto: unexpected end of group")
)
