package testutil

import (
	"encoding/json"
	"testing"

	"github.com/ethereum/go-ethereum/common"
	evmtypes "github.com/ethereum/go-ethereum/core/types"
	"github.com/stretchr/testify/require"

	"github.com/Lorenzo-Protocol/lorenzo/v3/x/ccev/types"
)

var testHeaders = `[
  {
    "hash": "0xe69cd248a8cfc686f3068f2a4fcfcd4cc9124740d04256ba755422caabce9c6a",
    "number": 42768115,
    "receipt_root": "0xa158f6890a6e620f3e9639aca35bb58b7d2fe679a85251470e47eec8368d3e30"
  },
  {
    "hash": "0x86b6329a4b18e138d3651969481374190b5af29a3b81fb3270829b700498d9de",
    "number": 42768116,
    "receipt_root": "0x7c9fbaf7cac72523b82758791ff6da714535f2b5dbfd88eaf5fd57e183cf17b4"
  },
  {
    "hash": "0x53f998a5631a56acffda2ce1315fe46c95d9b7a447edaabdda6c8781cd0deb90",
    "number": 42768117,
    "receipt_root": "0xb2cca81f9951bd00ffeb5385629806d0c1abdc1d9c773fa1ea594c8b400a1899"
  },
  {
    "hash": "0xfed7df1c461140d17b4b4ed942a24c14f325b354d8b95ba9ef2db05cad493574",
    "number": 42768118,
    "receipt_root": "0x790125e51b7cedfa5b4bcfdea5e623aa58f6d93886cef309fa4fc6040fb7969b"
  },
  {
    "hash": "0x991983f1f523fb02dd8268c286cf4d538088346f48ad0348e3b9576a3bad6125",
    "number": 42768119,
    "receipt_root": "0xa0b8d143c50f707e08b70dc3a0956f4994c9707b1eb0d4d32387138e7df43d48"
  },
  {
    "hash": "0xa1534655aaa3292c24dd21570cf2920ac41414e4f9c784ef2e391518d72fd1c6",
    "number": 42768120,
    "receipt_root": "0x1ce7a5c4b1ec43c1ffbbb01685191ba237122952b8f1050e575d7d0f4f9743df"
  },
  {
    "hash": "0xbdebfbf2d0b86f8b73cc31e211e47cc389f2122e338c5048408ef8015229c321",
    "number": 42768121,
    "receipt_root": "0x475a5ee66adb78d40715a829085a128a175235e1afa19a571af905213f8c0f58"
  },
  {
    "hash": "0x0c0b2689dcaf254f8e0e1ad28d3e2c9010a9ed93077fed5202074c10af553f5f",
    "number": 42768122,
    "receipt_root": "0xaabbbca5f9693c0558a4bd33534c6fd02f366d5232fa552be2f5e5618a6306b7"
  },
  {
    "hash": "0xed8230dbed7f3fe4f178a5a5a3c1f3e9e5e7daa942a248d65c7075f0f8c86c74",
    "number": 42768123,
    "receipt_root": "0xb46eaf93e294289d3be70310727231f11d3686d772537b87921c32a1d48ec866"
  },
  {
    "hash": "0x01aa6239f15b6af05d9bcbf226c2934a827aa42ecb22dc8dfcc7f2da520a2d4f",
    "number": 42768124,
    "receipt_root": "0x0fe2977c4e054912ea1be14b44ec3f2470bccb689ddb57e4413d7fd8920ea40d"
  }
]`

var receiptRLP = `b9034802f903440183113d2dbf90239f89b9449ff00552ca23899ba9f814bcf7ed55bc5cdd9cef863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa0000000000000000000000000dfb41dc2173d2be024e6d64a83fd011d4ae43e01a00000000000000000000000004730ddefe385300417cb5617f3adf0105aff6806a00000000000000000000000000000000000000000000000001bc16d674ec80000f89b942a45de58552f2c5e0597d1fbb8ec83f7e2ddba0df863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa00000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000dfb41dc2173d2be024e6d64a83fd011d4ae43e01a00000000000000000000000000000000000000000000000001bc16d674ec80000f8fd949adb675bc89d9ec5d829709e85562b7c99658d59f884a065199e8f9cbc273da46a3e57ea48d1ba2ced8379e8f19785847bb3bf1f712dfea00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000dfb41dc2173d2be024e6d64a83fd011d4ae43e01b86000000000000000000000000049ff00552ca23899ba9f814bcf7ed55bc5cdd9ce0000000000000000000000000000000000000000000000001bc16d674ec800000000000000000000000000000000000000000000000000001bc16d674ec80000`

var proofRLP = `f909190ab9034802f903440183113d2dbf90239f89b9449ff00552ca23899ba9f814bcf7ed55bc5cdd9cef863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa0000000000000000000000000dfb41dc2173d2be024e6d64a83fd011d4ae43e01a00000000000000000000000004730ddefe385300417cb5617f3adf0105aff6806a00000000000000000000000000000000000000000000000001bc16d674ec80000f89b942a45de58552f2c5e0597d1fbb8ec83f7e2ddba0df863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa00000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000dfb41dc2173d2be024e6d64a83fd011d4ae43e01a00000000000000000000000000000000000000000000000001bc16d674ec80000f8fd949adb675bc89d9ec5d829709e85562b7c99658d59f884a065199e8f9cbc273da46a3e57ea48d1ba2ced8379e8f19785847bb3bf1f712dfea00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000dfb41dc2173d2be024e6d64a83fd011d4ae43e01b86000000000000000000000000049ff00552ca23899ba9f814bcf7ed55bc5cdd9ce0000000000000000000000000000000000000000000000001bc16d674ec800000000000000000000000000000000000000000000000000001bc16d674ec80000f905caf887ac6551456c355274383766706253382f657065596a716c6a32325469477a764d4a2b6b2f4742412b336c70733dac6b303866774153725246654c746e6f6f3347436e737346466170724f447753645363674f616a4c6f4b62413dac4e347862563344515a725a2f4c4a335138735368796175635032564a67702f457a73756d722f4a6e776c773df9053eb853f851a0934f1fc004ab44578bb67a28dc60a7b2c1456a9ace0f049d49c80e6a32e829b080808080808080a0e44c574445030e690f39db1bde66164c3ed162119f3d3a89fbf80b0a1e55e53e8080808080808080b90194f9019180a01b5a6c3ba1663a9d926c26525bd5af6f01a683ce86cc5eea866c74d48d12b5b7a06972bc747931f7c2861a86b54b86cc82b312a78f34b7d129238e2a41bad0f600a0154cd2dc1505aa39d816623f1a1d0c89f75dece7893404cc5e0b2d1aa1ee19aea0efccd91cbb07756c8e754b3a46fa9fd9dbead952bf34e413a61a1238f59d2e22a0c5ebc118bf68a84b269acf053efb6f986e03df62e64301a030095000c0542f52a0fa6af3a5cd5a19b4f5d24461d9ea4052c23e5c53536f9989e925224a35d48231a0b6429abd7c1b16888eeae2ae2c53ec63bc6a5cfd0606da5f5b0ddf2195fc97e0a0e3d3e0f89776bb9aa145ffa0f1e5dc39d777d2c9745ea5b121b8c0e979155732a085e86d11a1376c7e25ed78d95eb63a8ee8b82639c16c6aee79292a884658c042a0378c5b5770d066b67f2c9dd0f2c4a1c9ab9c3f6549829fc4cecba6aff267c25ca06416535922d9bcd406243511108208059f1535735b5ee8fff3a99f0939fbd8c0a071085c605c2e76d176d7eb8e99b72d8af248f7e88e53ac1ca232798709a99ca680808080b9034ff9034c20b9034802f903440183113d2dbf90239f89b9449ff00552ca23899ba9f814bcf7ed55bc5cdd9cef863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa0000000000000000000000000dfb41dc2173d2be024e6d64a83fd011d4ae43e01a00000000000000000000000004730ddefe385300417cb5617f3adf0105aff6806a00000000000000000000000000000000000000000000000001bc16d674ec80000f89b942a45de58552f2c5e0597d1fbb8ec83f7e2ddba0df863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa00000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000dfb41dc2173d2be024e6d64a83fd011d4ae43e01a00000000000000000000000000000000000000000000000001bc16d674ec80000f8fd949adb675bc89d9ec5d829709e85562b7c99658d59f884a065199e8f9cbc273da46a3e57ea48d1ba2ced8379e8f19785847bb3bf1f712dfea00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000dfb41dc2173d2be024e6d64a83fd011d4ae43e01b86000000000000000000000000049ff00552ca23899ba9f814bcf7ed55bc5cdd9ce0000000000000000000000000000000000000000000000001bc16d674ec800000000000000000000000000000000000000000000000000001bc16d674ec80000`

// ProvedReceipt is the struct for proving receipt
type ProvedReceipt struct {
	Receipt *evmtypes.Receipt
	Number  uint64
	Proof   *types.Proof
}

// HeaderPool is the pool for headers
type HeaderPool struct {
	headers []*types.TinyHeader
}

// GetTestHeaders returns the test headers
func GetTestHeaders(t *testing.T) []*types.TinyHeader {
	var headers []*types.TinyHeader
	err := json.Unmarshal([]byte(testHeaders), &headers)
	require.NoError(t, err)

	return headers
}

// GetTestHeaderPool returns the test header GetTestHeaderPool
func GetTestHeaderPool(t *testing.T) *HeaderPool {
	headers := GetTestHeaders(t)
	return &HeaderPool{headers: headers}
}

// GetTestHeader returns the test header with the given number
func (hp *HeaderPool) GetTestHeader(number uint64) *types.TinyHeader {
	for _, header := range hp.headers {
		if header.Number == number {
			return header
		}
	}
	panic("header not found")
}

// GetTestHeaderByIndex returns the test header with the given index
func (hp *HeaderPool) GetTestHeaderByIndex(index int) *types.TinyHeader {
	if index >= len(hp.headers) {
		panic("header not found")
	}
	return hp.headers[index]
}

// GetTestProvedReceipts returns the test proved receipts
func GetTestProvedReceipts(t *testing.T) *ProvedReceipt {
	receipt, err := types.UnmarshalReceipt(common.Hex2Bytes(receiptRLP))
	require.NoError(t, err)

	proof, err := types.UnmarshalProof(common.Hex2Bytes(proofRLP))
	require.NoError(t, err)

	return &ProvedReceipt{
		Receipt: receipt,
		Number:  42768118,
		Proof:   proof,
	}
}
