package types

import (
	"encoding/hex"
	"testing"

	"github.com/ethereum/go-ethereum/rlp"
	"github.com/stretchr/testify/require"
)

func TestUnmarshalBNBHeader(t *testing.T) {
	hexHeader := "f90338a0dcb14c167a86bfc4d81e7e7556cd9e30729aa94087accedcea8e468d0ab08d79a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d493479408265da01e1a65d62b903c7b34c08cb389bf3d99a0d8b628c4f32a5905be1f36ccf4f6697f17d9722e77130d6624be4951660d8c1ca076b90b396fbb002db66f6186f1352e96213b4045144d36e1bdab88de6207968ea086e195e53c773b50f012ec7251e0273ff643eaf15772980e19eff8ae96e35bb8b90100000000000000000000020840020000000100000001000000000000000000000400001000000000000008000000000000000000000000000000000000000400000000000000000000000000080000000021100000000400000000200000000020000a002002020000000000000000080008000000000800000000201000000000400000000000000000000000000000000000040000000000800000000000002000000000000000a008000000020000000000080000000000000000000000000000200002004000004000000080080000000000004000000010104802000068000000000000020001010000840000010000008100020000004000000000080000028402833d3084042c1d8083074a43846697337db90116d88301040b846765746888676f312e32322e30856c696e7578000000631f83a6f8b381fbb860b099412d5cd1ecc7cb68acfe00ece09b1b31154b0dfd3e3cfe6001671361885abd3cca24cfb751a8d006ae9f719d8b19142b00edcbbc9495269bfd9791847630e54345139282be9e4959d4cf90d8f28fc7fc909fc0e919e564913ed34972cf02f84c8402833d2ea084ef8ff93aa6ecf2fee881c363650d5a1e037d6d6e56bc5cfc95cacd26cf1d758402833d2fa0dcb14c167a86bfc4d81e7e7556cd9e30729aa94087accedcea8e468d0ab08d7980c7a3b81c1fedbfe6fb011d26c018edd78a33581be12691680d50d9221ad5fdb56c2b38bf74b68e16bf6e984b696f655d0be9bddf075775995f74027697ceccaa00a0000000000000000000000000000000000000000000000000000000000000000088000000000000000080a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b4218080"

	bz, err := hex.DecodeString(hexHeader)
	require.NoError(t, err, "hexHeader decode error")

	header, err := UnmarshalBNBHeader(bz)
	require.NoError(t, err, "UnmarshalBNBHeader error")
	require.Equal(t,
		"0x0eb9229e5bbe6a91288fc8c1a998f6992e3bd28eeaa6a7032a4292e289c68385",
		header.Hash().String(),
		"header hash should be equal",
	)

	bz2, err := rlp.EncodeToBytes(header)
	require.NoError(t, err, "rlp.EncodeToBytes error")
	require.Equal(t, bz, bz2, "header should be equal")
}

func TestUnmarshalReceipt(t *testing.T) {
	hexReceipt := "b901ab02f901a70183032d19bf89df89b94d1575a7ce61e202f3d7caab954fd4dbd8cc9de45f863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa00000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000ae122d474b835f5c947482404f9837aa37a309efa000000000000000000000000000000000000000000000003635c9adc5dea00000"

	bz, err := hex.DecodeString(hexReceipt)
	require.NoError(t, err, "hexHeader decode error")

	receipt, err := UnmarshalReceipt(bz)
	require.NoError(t, err)
	_ = receipt
	// require.Equal(t, receipt.TxHash, common.HexToHash("0xb731fe61405456b6f827dfc5458ade817fc19ab5ec31de6f93296cf1bc42ccab"))
}

func TestUnmarshalProof(t *testing.T) {
	hexProof := "f904fd02b901ab02f901a70183025ca8bf89df89b94d1575a7ce61e202f3d7caab954fd4dbd8cc9de45f863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000006957295eb5e5988e5e568895544b28e552b3f347a000000000000000000000000000000000000000000000003635c9adc5dea00000f9034bf887ac68754756355478334f314477457578795565416e502f5a44367646586370674f47652f347270626a5737673dac4d3341326672394e30773545526c506c524756736965776f6e73324630614170765147694e464664652b383dac41694c6d584364455751764e6236566d636e72772f45732b54356d67686d436c462f36787462474e444e553df902bfb853f851a03370367ebf4dd30e444653e544656c89ec289ecd85d1a029bd01a234515d7bef80808080808080a0302102cdf7576b80b3fe3980ab31b5d155986c14524616baa7a9fb9f6ce5c7108080808080808080b8b3f8b180a045e75599758fd16e0af3f2b11b3e3b9cd4133e262391c5ff0ec2fdf01c4ac03aa00222e65c2744590bcd6fa566727af0fc4b3e4f99a08660a517feb1b5b18d0cd5a0d971140e9f88d6b587c0747e54544af962f3812789a051bde775d769b7a32554a07567ae08f8e47bb025997b27c0edcc7dcf5069af554eb9af8b48bebf828ce794a05dd6ef29d80310e81bc91d6cc4ea74bca0dfd7f18229d1d453e95ce1c88cc8de8080808080808080808080b901b2f901af20b901ab02f901a70183025ca8bf89df89b94d1575a7ce61e202f3d7caab954fd4dbd8cc9de45f863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000006957295eb5e5988e5e568895544b28e552b3f347a000000000000000000000000000000000000000000000003635c9adc5dea00000"
	bz, err := hex.DecodeString(hexProof)
	require.NoError(t, err, "hexProof decode error")

	proof, err := UnmarshalProof(bz)
	require.NoError(t, err)
	_ = proof
}
