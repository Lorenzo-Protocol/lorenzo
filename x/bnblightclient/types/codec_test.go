package types_test

import (
	"encoding/hex"
	"testing"

	"github.com/ethereum/go-ethereum/rlp"
	"github.com/stretchr/testify/require"

	"github.com/Lorenzo-Protocol/lorenzo/v3/x/bnblightclient/testutil"
	"github.com/Lorenzo-Protocol/lorenzo/v3/x/bnblightclient/types"
)

func TestUnmarshalBNBHeader(t *testing.T) {
	headers := testutil.GetTestHeaders(t)

	header, err := types.UnmarshalBNBHeader(headers[0].RawHeader)
	require.NoError(t, err, "UnmarshalBNBHeader error")
	require.Equal(t,
		headers[0].Hash,
		header.Hash().Bytes(),
		"header hash should be equal",
	)
}

func TestUnmarshalReceipt(t *testing.T) {
	hexReceipt := "b901ab02f901a70183032d19bf89df89b94d1575a7ce61e202f3d7caab954fd4dbd8cc9de45f863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa00000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000ae122d474b835f5c947482404f9837aa37a309efa000000000000000000000000000000000000000000000003635c9adc5dea00000"

	bz, err := hex.DecodeString(hexReceipt)
	require.NoError(t, err, "hexHeader decode error")

	receipt, err := types.UnmarshalReceipt(bz)
	require.NoError(t, err)

	bz2, err := rlp.EncodeToBytes(receipt)
	require.NoError(t, err, "rlp.EncodeToBytes error")
	require.Equal(t, bz, bz2, "receipt should be equal")
}

func TestUnmarshalProof(t *testing.T) {
	hexProof := "f904fd02b901ab02f901a70183025ca8bf89df89b94d1575a7ce61e202f3d7caab954fd4dbd8cc9de45f863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000006957295eb5e5988e5e568895544b28e552b3f347a000000000000000000000000000000000000000000000003635c9adc5dea00000f9034bf887ac68754756355478334f314477457578795565416e502f5a44367646586370674f47652f347270626a5737673dac4d3341326672394e30773545526c506c524756736965776f6e73324630614170765147694e464664652b383dac41694c6d584364455751764e6236566d636e72772f45732b54356d67686d436c462f36787462474e444e553df902bfb853f851a03370367ebf4dd30e444653e544656c89ec289ecd85d1a029bd01a234515d7bef80808080808080a0302102cdf7576b80b3fe3980ab31b5d155986c14524616baa7a9fb9f6ce5c7108080808080808080b8b3f8b180a045e75599758fd16e0af3f2b11b3e3b9cd4133e262391c5ff0ec2fdf01c4ac03aa00222e65c2744590bcd6fa566727af0fc4b3e4f99a08660a517feb1b5b18d0cd5a0d971140e9f88d6b587c0747e54544af962f3812789a051bde775d769b7a32554a07567ae08f8e47bb025997b27c0edcc7dcf5069af554eb9af8b48bebf828ce794a05dd6ef29d80310e81bc91d6cc4ea74bca0dfd7f18229d1d453e95ce1c88cc8de8080808080808080808080b901b2f901af20b901ab02f901a70183025ca8bf89df89b94d1575a7ce61e202f3d7caab954fd4dbd8cc9de45f863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000006957295eb5e5988e5e568895544b28e552b3f347a000000000000000000000000000000000000000000000003635c9adc5dea00000"
	bz, err := hex.DecodeString(hexProof)
	require.NoError(t, err, "hexProof decode error")

	proof, err := types.UnmarshalProof(bz)
	require.NoError(t, err)

	proofBz, err := rlp.EncodeToBytes(proof)
	require.NoError(t, err)
	require.Equal(t, hexProof, hex.EncodeToString(proofBz))
}
