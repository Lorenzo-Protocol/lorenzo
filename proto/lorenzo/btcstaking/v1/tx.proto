syntax = "proto3";
package lorenzo.btcstaking.v1;

import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "amino/amino.proto";
import "lorenzo/btcstaking/v1/params.proto";

option go_package = "github.com/Lorenzo-Protocol/lorenzo/v3/x/btcstaking/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  rpc CreateBTCStaking(MsgCreateBTCStaking)
      returns (MsgCreateBTCStakingResponse);

  rpc CreateBTCBStaking(MsgCreateBTCBStaking)
      returns (MsgCreateBTCBStakingResponse);

  rpc Burn(MsgBurnRequest) returns (MsgBurnResponse);

  rpc AddReceiver(MsgAddReceiver) returns (MsgAddReceiverResponse);

  rpc RemoveReceiver(MsgRemoveReceiver) returns (MsgRemoveReceiverResponse);

  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

message TransactionKey {
  uint32 index = 1;
  bytes hash = 2
      [ (gogoproto.customtype) =
            "github.com/Lorenzo-Protocol/lorenzo/v3/types.BTCHeaderHashBytes" ];
}

// TransactionInfo is the info of a tx on Bitcoin,
// including
// - the position of the tx on BTC blockchain
// - the full tx content
// - the Merkle proof that this tx is on the above position
message TransactionInfo {
  // key is the position (txIdx, blockHash) of this tx on BTC blockchain
  // Although it is already a part of SubmissionKey, we store it here again
  // to make TransactionInfo self-contained.
  // For example, storing the key allows TransactionInfo to not relay on
  // the fact that TransactionInfo will be ordered in the same order as
  // TransactionKeys in SubmissionKey.
  TransactionKey key = 1;
  // transaction is the full transaction in bytes
  bytes transaction = 2;
  bytes proof = 3;
}

message MsgCreateBTCStaking {
  option (cosmos.msg.v1.signer) = "signer";
  option (amino.name) = "lorenzo/btcstaking/MsgCreateBTCStaking";

  string signer = 1;
  TransactionInfo staking_tx = 2;
  // deprecated
  string receiver = 3;
  uint64 agent_id = 4;
}

message MsgCreateBTCStakingResponse {}

message MsgCreateBTCBStaking {
  option (cosmos.msg.v1.signer) = "signer";
  option (amino.name) = "lorenzo/btcstaking/MsgCreateBTCBStaking";

  string signer = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  uint64 number = 2;
  bytes receipt = 3;
  bytes proof = 4;
}

message MsgCreateBTCBStakingResponse {}

message MsgBurnRequest {
  option (cosmos.msg.v1.signer) = "signer";
  option (amino.name) = "lorenzo/btcstaking/MsgBurnRequest";

  string signer = 1;
  string btc_target_address = 2;
  string amount = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

message MsgBurnResponse {}

message MsgAddReceiver {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "lorenzo/btcstaking/MsgAddReceiver";

  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  Receiver receiver = 2 [ (gogoproto.nullable) = false ];
}

message MsgAddReceiverResponse {}
message MsgRemoveReceiver {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "lorenzo/btcstaking/MsgRemoveReceiver";

  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  string receiver = 2;
}
message MsgRemoveReceiverResponse {}
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "lorenzo/btcstaking/MsgUpdateParams";

  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  Params params = 2 [ (gogoproto.nullable) = false ];
}

message MsgUpdateParamsResponse {}
