syntax = "proto3";
package lorenzo.plan.v1;

import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";
import "gogoproto/gogo.proto";
import "amino/amino.proto";
import "lorenzo/plan/v1/params.proto";
import "lorenzo/plan/v1/plan.proto";

option go_package = "github.com/Lorenzo-Protocol/lorenzo/v3/x/plan/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams defines a method for updating the plan parameters.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  // UpgradePlan defines a governance operation for upgrading an Plan contract
  rpc UpgradePlan(MsgUpgradePlan) returns (MsgUpgradePlanResponse);

  // CreatePlan defines a method for creating a new plan.
  rpc CreatePlan(MsgCreatePlan) returns (MsgCreatePlanResponse);

  // SetMerkleRoot defines a method for setting the merkle root of the plan.
  rpc SetMerkleRoot(MsgSetMerkleRoot) returns (MsgSetMerkleRootResponse);

  // CreateClaim defines a method for claims rewards to sender.
  rpc Claims(MsgClaims) returns (MsgClaimsResponse);

  // UpdatePlanStatus defines a method for updating the plan status.
  rpc UpdatePlanStatus(MsgUpdatePlanStatus)
      returns (MsgUpdatePlanStatusResponse);

  // CreateYAT defines a method for creating a new YAT contract.
  rpc CreateYAT(MsgCreateYAT) returns (MsgCreateYATResponse);

  // SetMinter defines a method for setting minter of the YAT contract.
  rpc SetMinter(MsgSetMinter) returns (MsgSetMinterResponse);

  // RemoveMinter defines a method for removing minter of the YAT contract.
  rpc RemoveMinter(MsgRemoveMinter) returns (MsgRemoveMinterResponse);
}

// MsgUpdateParams is the request type for the Msg/UpdateParams RPC method.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "lorenzo/plan/MsgUpdateParams";
  // authority is the address of the governance account.
  // just FYI: cosmos.AddressString marks that this field should use type alias
  // for AddressString instead of string, but the functionality is not yet
  // implemented in cosmos-proto
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // NOTE: All parameters must be supplied.
  Params params = 2 [ (gogoproto.nullable) = false ];
}

// MsgUpdateParamsResponse is the response type for the Msg/UpdateParams RPC
// method.
message MsgUpdateParamsResponse {}

// MsgUpgradePlan is the request type for the Msg/UpgradePlan RPC method.
message MsgUpgradePlan {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "lorenzo/plan/MsgUpgradePlan";
  // implementation is the new yat logic contract address
  string implementation = 1;

  // authority is the address of the governance account.
  // just FYI: cosmos.AddressString marks that this field should use type alias
  // for AddressString instead of string, but the functionality is not yet
  // implemented in cosmos-proto
  string authority = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// MsgUpgradeYATResponse is the response type for the Msg/UpgradeYAT RPC method.
message MsgUpgradePlanResponse {}

// MsgCreatePlan is the request type for the Msg/CreatePlan RPC method.
message MsgCreatePlan {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "lorenzo/plan/MsgCreatePlan";

  // name is the name of the plan
  string name = 1;

  // plan_desc_uri is the URI of the plan description
  string plan_desc_uri = 2;

  // agent_id is the unique identifier of the agent
  uint64 agent_id = 3;

  // plan_start_time is the start time of the plan
  uint64 plan_start_time = 4;

  // period_time is the period time of the plan
  uint64 period_time = 5;

  // yat_contract_address is the address of the yat contract
  string yat_contract_address = 6;

  // sender is the address of the allowed sender
  string sender = 7 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// MsgCreatePlanResponse is the response type for the Msg/CreatePlan RPC method.
message MsgCreatePlanResponse {
  // id is the unique identifier of the plan
  uint64 id = 1;
}

// MsgSetMerkleRoot is the request type for the Msg/SetMerkleRoot RPC method.
message MsgSetMerkleRoot {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "lorenzo/plan/MsgSetMerkleRoot";

  // plan_id is the unique identifier of the plan
  uint64 plan_id = 1;

  // round_id is the unique identifier of the round
  string round_id = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];

  // merkle_root is the merkle root of the plan
  string merkle_root = 3;

  // sender is the address of the allowed sender
  string sender = 4 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// MsgSetMerkleRootResponse is the response type for the Msg/SetMerkleRoot RPC
// method.
message MsgSetMerkleRootResponse {}

// MsgClaims is the request type for the Msg/Claims RPC method.
message MsgClaims {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "lorenzo/plan/MsgClaims";

  // plan_id is the unique identifier of the plan
  uint64 plan_id = 1;

  // receiver is the address of the receiver
  string receiver = 2;

  // round_id is the unique identifier of the round
  string round_id = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];

  // amount is the amount of the claim
  string amount = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];

  // merkle_proof is the merkle proof of the claim
  string merkle_proof = 5;

  // sender is the address of the governance account or module admin
  string sender = 6 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// MsgClaimsResponse is the response type for the Msg/Claims RPC method.
message MsgClaimsResponse {}

// MsgUpdatePlanStatus is the request type for the Msg/UpdatePlanStatus RPC
// method.
message MsgUpdatePlanStatus {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "lorenzo/plan/MsgUpdatePlanStatus";

  // plan_id is the unique identifier of the plan
  uint64 plan_id = 1;

  // status is the status of the plan
  PlanStatus status = 2;

  // sender is the address of the allowed sender
  string sender = 3 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// MsgUpdatePlanStatusResponse is the response type for the Msg/UpdatePlanStatus
// RPC method.
message MsgUpdatePlanStatusResponse {}

// MsgCreateYAT is the request type for the Msg/CreateYAT RPC method.
message MsgCreateYAT {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "lorenzo/plan/MsgCreateYAT";

  // name is the name of the yat contract
  string name = 1;

  // symbol is the symbol of the yat contract
  string symbol = 2;

  // sender is the address of the allowed sender
  string sender = 3 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// MsgCreateYATResponse is the response type for the Msg/CreateYAT RPC method.
message MsgCreateYATResponse {
  // contract_address is the address of the yat contract
  string contract_address = 1;
}

// MsgSetMinter is the request type for the Msg/SetMinter RPC method.
message MsgSetMinter {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "lorenzo/plan/MsgSetMinter";

  // minter is the address of the minter
  string minter = 1;

  // contract_address is the address of the yat contract
  string contract_address = 2;

  // sender is the address of the allowed sender
  string sender = 3 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// MsgSetMinterResponse is the response type for the Msg/SetMinter RPC method.
message MsgSetMinterResponse {}

// MsgRemoveMinter is the request type for the Msg/RemoveMinter RPC method.
message MsgRemoveMinter {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "lorenzo/plan/MsgRemoveMinter";

  // minter is the address of the minter
  string minter = 1;

  // contract_address is the address of the yat contract
  string contract_address = 2;

  // sender is the address of the allowed sender
  string sender = 3 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// MsgRemoveMinterResponse is the response type for the Msg/RemoveMinter RPC
// method.
message MsgRemoveMinterResponse {}
