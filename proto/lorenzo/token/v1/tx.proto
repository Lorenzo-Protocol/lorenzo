syntax = "proto3";
package lorenzo.token.v1;

import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "lorenzo/token/v1/genesis.proto";

option go_package = "github.com/Lorenzo-Protocol/lorenzo/x/token/types";

service Msg {
  // ConvertCoin converts a coin to an ERC20 token
  rpc ConvertCoin(MsgConvertCoin) returns (MsgConvertCoinResponse);
  // ConvertERC20 converts an ERC20 token to a coin
  rpc ConvertERC20(MsgConvertERC20) returns (MsgConvertERC20Response);
  // UpdateParams updates the convert module parameters
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// MsgConvertCoin converts a coin to an ERC20 token
message MsgConvertCoin {
  // coin to be converted
  cosmos.base.v1beta1.Coin coin = 1 [(gogoproto.nullable) = false];
  // receiver of the erc20 token, evm hex format address.
  string receiver = 2;
  // sender of the coin, lorenzo bech32 format address.
  string sender = 3;
}

message MsgConvertCoinResponse {}

// MsgConvertERC20 converts an ERC20 token to a coin
message MsgConvertERC20 {
  // contract address of the ERC20 token
  string contract_address = 1;
  // amount of tokens to be converted
  string amount = 2 [(gogoproto.customtype) = "cosmossdk.io/math.Int", (gogoproto.nullable) = false];
  // receiver of the coin
  string receiver = 3;
  // sender of the ERC20 token
  string sender = 4;
}

message MsgConvertERC20Response {}

// MsgUpdateParams updates the convert module parameters
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  // authority is the address that can update the parameters
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // params are the new parameters
  Params params = 2 [(gogoproto.nullable) = false];
}

message MsgUpdateParamsResponse {}