syntax = "proto3";
package lorenzo.token.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/bank/v1beta1/bank.proto";
import "amino/amino.proto";
import "lorenzo/token/v1/genesis.proto";

option go_package = "github.com/Lorenzo-Protocol/lorenzo/v3/x/token/types";

service Msg {
  // RegisterCoin registers a token pair for existing coin
  rpc RegisterCoin(MsgRegisterCoin) returns (MsgRegisterCoinResponse);
  // RegisterERC20 registers a token pair for existing erc20 contract
  rpc RegisterERC20(MsgRegisterERC20) returns (MsgRegisterERC20Response);
  // ToggleConversion toggles the conversion for a token pair
  rpc ToggleConversion(MsgToggleConversion)
      returns (MsgToggleConversionResponse);
  // ConvertCoin converts a coin to an ERC20 token
  rpc ConvertCoin(MsgConvertCoin) returns (MsgConvertCoinResponse);
  // ConvertERC20 converts an ERC20 token to a coin
  rpc ConvertERC20(MsgConvertERC20) returns (MsgConvertERC20Response);
  // UpdateParams updates the convert module parameters
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// MsgRegisterCoin registers a token pair for existing coin
// NOTE: this is a governance message.
message MsgRegisterCoin {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "lorenzo/token/MsgRegisterCoin";

  // authority is the address that can update the parameters
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // metadata slice of coins
  repeated cosmos.bank.v1beta1.Metadata metadata = 2
      [ (gogoproto.nullable) = false ];
}

message MsgRegisterCoinResponse {}

// MsgRegisterERC20 registers a token pair for existing erc20 contract
// NOTE: this is a governance message.
message MsgRegisterERC20 {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "lorenzo/token/MsgRegisterERC20";

  // authority is the address that can update the parameters
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // metadata slice of erc20 token contract addresses
  repeated string contract_addresses = 2;
}

message MsgRegisterERC20Response {}

// MsgToggleConversion toggles the conversion for a token pair
// NOTE: this is a governance message.
message MsgToggleConversion {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "lorenzo/token/MsgToggleConversion";

  // authority is the address that can update the parameters
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // token is in format of either coin base denom or erc20 contract address
  string token = 2;
}

message MsgToggleConversionResponse {}

// MsgConvertCoin converts a coin to an ERC20 token
message MsgConvertCoin {
  option (amino.name) = "lorenzo/token/MsgConvertCoin";

  // coin to be converted
  cosmos.base.v1beta1.Coin coin = 1 [ (gogoproto.nullable) = false ];
  // receiver of the erc20 token, evm hex format address.
  string receiver = 2;
  // sender of the coin, lorenzo bech32 format address.
  string sender = 3;
}

message MsgConvertCoinResponse {}

// MsgConvertERC20 converts an ERC20 token to a coin
message MsgConvertERC20 {
  option (amino.name) = "lorenzo/token/MsgConvertERC20";

  // contract address of the ERC20 token
  string contract_address = 1;
  // amount of tokens to be converted
  string amount = 2 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
  // receiver of the coin
  string receiver = 3;
  // sender of the ERC20 token
  string sender = 4;
}

message MsgConvertERC20Response {}

// MsgUpdateParams updates the convert module parameters
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "lorenzo/token/MsgUpdateParams";

  // authority is the address that can update the parameters
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // params are the new parameters
  Params params = 2 [ (gogoproto.nullable) = false ];
}

message MsgUpdateParamsResponse {}